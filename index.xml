<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>负责和大饼的博客 on 负责和大饼的博客</title>
    <link>http://www.ebankp.com/</link>
    <description>Recent content in 负责和大饼的博客 on 负责和大饼的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 24 Jul 2019 22:51:02 +0800</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>后端架构师技术图谱</title>
      <link>http://www.ebankp.com/2019/architect_awesome/</link>
      <pubDate>Wed, 24 Jul 2019 22:51:02 +0800</pubDate>
      
      <guid>http://www.ebankp.com/2019/architect_awesome/</guid>
      <description>

&lt;h1&gt;《后端架构师技术图谱》&lt;/h1&gt;

&lt;p&gt;&lt;b style=&#34;color:red&#34;&gt;推荐:&lt;/b&gt; &lt;a href=&#34;https://github.com/sorenduan/awesome-java-books&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《Java技术书籍大全》 - awesome-java-books&lt;/a&gt;
&lt;p&gt;从初级开发者到资深架构师，看这些书就够了&lt;/p&gt;
&lt;hr/&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Creative%20Commons-DC3D24.svg&#34; alt=&#34;知识共享协议（CC协议）&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/stargazers&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/xingshaocheng/architect-awesome.svg?style=flat&amp;amp;label=Star&#34; alt=&#34;GitHub stars&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/fork&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/forks/xingshaocheng/architect-awesome.svg?style=flat&amp;amp;label=Fork&#34; alt=&#34;GitHub forks&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/watchers&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/watchers/xingshaocheng/architect-awesome.svg?style=flat&amp;amp;label=Watch&#34; alt=&#34;GitHub watchers&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;https://github.com/xingshaocheng&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/followers/xingshaocheng.svg?label=%E5%85%B3%E6%B3%A8&#34; alt=&#34;GitHub followers&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#数据结构&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;数据结构&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#队列&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;队列&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#集合&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;集合&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#链表数组&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;链表、数组&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#字典关联数组&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;字典、关联数组&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#栈&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;栈&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#树&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;树&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#二叉树&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;二叉树&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#完全二叉树&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;完全二叉树&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#平衡二叉树&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;平衡二叉树&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#二叉查找树bst&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;二叉查找树（BST）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#红黑树&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;红黑树&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#b-bb树&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;B，B+，B*树&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#lsm-树&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;LSM 树&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#bitset&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;BitSet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#常用算法&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;常用算法&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#排序查找算法&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;排序、查找算法&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#选择排序&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;选择排序&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#冒泡排序&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;冒泡排序&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#插入排序&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;插入排序&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#快速排序&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;快速排序&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#归并排序&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;归并排序&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#希尔排序&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;希尔排序&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#堆排序&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;堆排序&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#计数排序&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;计数排序&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#桶排序&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;桶排序&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#基数排序&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;基数排序&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#二分查找&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;二分查找&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#java-中的排序工具&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Java 中的排序工具&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#布隆过滤器&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;布隆过滤器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#字符串比较&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;字符串比较&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#kmp-算法&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;KMP 算法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#深度优先广度优先&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;深度优先、广度优先&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#贪心算法&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;贪心算法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#回溯算法&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;回溯算法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#剪枝算法&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;剪枝算法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#动态规划&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;动态规划&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#朴素贝叶斯&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;朴素贝叶斯&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#推荐算法&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;推荐算法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#最小生成树算法&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;最小生成树算法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#最短路径算法&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;最短路径算法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#并发&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;并发&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#java-并发&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Java 并发&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#多线程&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;多线程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#线程安全&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;线程安全&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#一致性事务&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;一致性、事务&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#事务-acid-特性&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;事务 ACID 特性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#事务的隔离级别&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;事务的隔离级别&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#mvcc&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;MVCC&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#锁&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;锁&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#java中的锁和同步类&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Java中的锁和同步类&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#公平锁--非公平锁&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;公平锁 &amp;amp; 非公平锁&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#悲观锁&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;悲观锁&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#乐观锁--cas&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;乐观锁 &amp;amp; CAS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#aba-问题&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;ABA 问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#copyonwrite容器&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;CopyOnWrite容器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#ringbuffer&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;RingBuffer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#可重入锁--不可重入锁&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;可重入锁 &amp;amp; 不可重入锁&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#互斥锁--共享锁&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;互斥锁 &amp;amp; 共享锁&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#死锁&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;死锁&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#操作系统&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;操作系统&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#计算机原理&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;计算机原理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#cpu&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;CPU&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#多级缓存&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;多级缓存&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#进程&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;进程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#线程&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;线程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#协程&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;协程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#linux&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Linux&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#设计模式&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;设计模式&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#设计模式的六大原则&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;设计模式的六大原则&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#23种常见设计模式&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;23种常见设计模式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#应用场景&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;应用场景&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#单例模式&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;单例模式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#责任链模式&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;责任链模式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#mvc&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;MVC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#ioc&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;IOC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#aop&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;AOP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#uml&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;UML&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#微服务思想&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;微服务思想&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#康威定律&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;康威定律&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#运维--统计--技术支持&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;运维 &amp;amp; 统计 &amp;amp; 技术支持&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#常规监控&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;常规监控&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#apm&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;APM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#统计分析&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;统计分析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#持续集成cicd&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;持续集成(CI/CD)&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#jenkins&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Jenkins&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#环境分离&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;环境分离&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#自动化运维&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;自动化运维&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#ansible&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Ansible&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#puppet&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;puppet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#chef&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;chef&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#测试&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;测试&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#tdd-理论&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;TDD 理论&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#单元测试&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;单元测试&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#压力测试&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;压力测试&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#全链路压测&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;全链路压测&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#ab-灰度蓝绿测试&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;A/B 、灰度、蓝绿测试&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#虚拟化&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;虚拟化&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#kvm&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;KVM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#xen&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Xen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#openvz&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;OpenVZ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#容器技术&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;容器技术&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#docker&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Docker&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#云技术&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;云技术&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#openstack&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;OpenStack&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#devops&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;DevOps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#文档管理&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;文档管理&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#中间件&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;中间件&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#web-server&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Web Server&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#nginx&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Nginx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#openresty&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;OpenResty&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#Tengine&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Tengine&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#apache-httpd&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Apache Httpd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#tomcat&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Tomcat&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#架构原理&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;架构原理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#调优方案&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;调优方案&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#jetty&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Jetty&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#缓存&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;缓存&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#本地缓存&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;本地缓存&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#客户端缓存&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;客户端缓存&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#服务端缓存&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;服务端缓存&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#web缓存&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Web缓存&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#memcached&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Memcached&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#redis&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Redis&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#架构&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;架构&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#回收策略&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;回收策略&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#tair&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Tair&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#消息队列&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;消息队列&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#消息总线&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;消息总线&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#消息的顺序&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;消息的顺序&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#rabbitmq&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;RabbitMQ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#rocketmq&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;RocketMQ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#activemq&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;ActiveMQ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#kafka&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Kafka&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#redis-消息推送&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Redis 消息推送&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#zeromq&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;ZeroMQ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#定时调度&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;定时调度&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#单机定时调度&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;单机定时调度&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#分布式定时调度&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;分布式定时调度&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#rpc&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;RPC&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#dubbo&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Dubbo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#thrift&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Thrift&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#grpc&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;gRPC&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#数据库中间件&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;数据库中间件&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#sharding-jdbc&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Sharding Jdbc&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#日志系统&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;日志系统&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#日志搜集&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;日志搜集&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#配置中心&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;配置中心&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#api-网关&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;API 网关&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#网络&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;网络&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#协议&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;协议&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#osi-七层协议&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;OSI 七层协议&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#tcpip&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;TCP/IP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#http&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;HTTP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#http20&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;HTTP2.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#https&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;HTTPS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#网络模型&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;网络模型&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#epoll&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Epoll&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#java-nio&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Java NIO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#kqueue&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;kqueue&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#连接和短连接&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;连接和短连接&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#框架&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;框架&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#零拷贝zero-copy&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;零拷贝（Zero-copy）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#序列化二进制协议&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;序列化(二进制协议)&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#hessian&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Hessian&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#protobuf&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Protobuf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#数据库&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;数据库&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#基础理论&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;基础理论&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#关系数据库设计的三大范式&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;关系数据库设计的三大范式&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#mysql&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;MySQL&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#原理&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;原理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#innodb&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;InnoDB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#优化&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;优化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#索引&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;索引&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#聚集索引-非聚集索引&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;聚集索引, 非聚集索引&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#复合索引&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;复合索引&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#自适应哈希索引ahi&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;自适应哈希索引(AHI)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#explain&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;explain&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#nosql&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;NoSQL&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#mongodb&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;MongoDB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#hbase&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Hbase&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#搜索引擎&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;搜索引擎&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#搜索引擎原理&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;搜索引擎原理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#lucene&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Lucene&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#elasticsearch&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Elasticsearch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#solr&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Solr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#sphinx&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;sphinx&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#性能&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;性能&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#性能优化方法论&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;性能优化方法论&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#容量评估&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;容量评估&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#cdn-网络&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;CDN 网络&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#连接池&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;连接池&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#性能调优&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;性能调优&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#大数据&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;大数据&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#流式计算&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;流式计算&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#storm&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Storm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#flink&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Flink&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#kafka-stream&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Kafka Stream&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#应用场景-1&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;应用场景&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#hadoop&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Hadoop&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#hdfs&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;HDFS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#mapreduce&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;MapReduce&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#yarn&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Yarn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#spark&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Spark&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#安全&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;安全&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#web-安全&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;web 安全&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#xss&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;XSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#csrf&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;CSRF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#sql-注入&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;SQL 注入&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#hash-dos&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Hash Dos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#脚本注入&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;脚本注入&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#漏洞扫描工具&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;漏洞扫描工具&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#验证码&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;验证码&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#ddos-防范&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;DDoS 防范&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#用户隐私信息保护&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;用户隐私信息保护&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#序列化漏洞&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;序列化漏洞&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#加密解密&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;加密解密&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#对称加密&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;对称加密&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#哈希算法&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;哈希算法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#非对称加密&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;非对称加密&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#服务器安全&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;服务器安全&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#数据安全&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;数据安全&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#数据备份&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;数据备份&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#网络隔离&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;网络隔离&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#内外网分离&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;内外网分离&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#登录跳板机&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;登录跳板机&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#授权认证&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;授权、认证&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#rbac&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;RBAC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#oauth20&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;OAuth2.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#双因素认证2fa&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;双因素认证（2FA）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#单点登录sso&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;单点登录(SSO)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#常用开源框架&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;常用开源框架&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#开源协议&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;开源协议&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#日志框架&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;日志框架&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#log4jlog4j2&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Log4j、Log4j2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#logback&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Logback&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#orm&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;ORM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#网络框架&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;网络框架&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#web-框架&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Web 框架&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#spring-家族&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Spring 家族&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#工具框架&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;工具框架&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#分布式设计&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;分布式设计&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#扩展性设计&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;扩展性设计&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#稳定性--高可用&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;稳定性 &amp;amp; 高可用&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#硬件负载均衡&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;硬件负载均衡&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#软件负载均衡&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;软件负载均衡&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#限流&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;限流&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#应用层容灾&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;应用层容灾&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#跨机房容灾&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;跨机房容灾&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#容灾演练流程&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;容灾演练流程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#平滑启动&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;平滑启动&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#数据库扩展&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;数据库扩展&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#读写分离模式&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;读写分离模式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#分片模式&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;分片模式&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#服务治理&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;服务治理&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#服务注册与发现&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;服务注册与发现&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#服务路由控制&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;服务路由控制&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#分布式一致&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;分布式一致&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#cap-与-base-理论&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;CAP 与 BASE 理论&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#分布式锁&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;分布式锁&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#分布式一致性算法&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;分布式一致性算法&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#paxos&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;PAXOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#zab&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Zab&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#raft&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Raft&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#gossip&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Gossip&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#两阶段提交多阶段提交&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;两阶段提交、多阶段提交&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#幂等&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;幂等&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#分布式一致方案&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;分布式一致方案&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#分布式-leader-节点选举&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;分布式 Leader 节点选举&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#tcctryconfirmcancel-柔性事务&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;TCC(Try/Confirm/Cancel) 柔性事务&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#分布式文件系统&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;分布式文件系统&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#唯一id-生成&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;唯一ID 生成&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#全局唯一id&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;全局唯一ID&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#一致性hash算法&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;一致性Hash算法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#设计思想--开发模式&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;设计思想 &amp;amp; 开发模式&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#ddddomain-driven-design---领域驱动设计&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;DDD(Domain-driven Design - 领域驱动设计)&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#命令查询职责分离cqrs&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;命令查询职责分离(CQRS)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#贫血充血模型&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;贫血，充血模型&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#actor-模式&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Actor 模式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#响应式编程&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;响应式编程&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#reactor&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Reactor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#rxjava&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;RxJava&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#vertx&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Vert.x&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#dodaf20&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;DODAF2.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#serverless&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Serverless&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#service-mesh&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Service Mesh&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#项目管理&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;项目管理&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#架构评审&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;架构评审&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#重构&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;重构&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#代码规范&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;代码规范&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#代码-review&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;代码 Review&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#rup&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;RUP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#看板管理&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;看板管理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#scrum&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;SCRUM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#敏捷开发&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;敏捷开发&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#极限编程xp&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;极限编程（XP）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#结对编程&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;结对编程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#pdca-循环质量管理&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;PDCA 循环质量管理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#fmea管理模式&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;FMEA管理模式&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#通用业务术语&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;通用业务术语&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#技术趋势&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;技术趋势&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#政策法规&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;政策、法规&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#法律&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;法律&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#严格遵守刑法253法条&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;严格遵守刑法253法条&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#架构师素质&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;架构师素质&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#团队管理&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;团队管理&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#招聘&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;招聘&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#资讯&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;资讯&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#行业资讯&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;行业资讯&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#公众号列表&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;公众号列表&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#博客&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;博客&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#团队博客&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;团队博客&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#个人博客&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;个人博客&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#综合门户社区&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;综合门户、社区&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#问答讨论类社区&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;问答、讨论类社区&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#行业数据分析&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;行业数据分析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#专项网站&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;专项网站&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#其他类&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;其他类&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#推荐参考书&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;推荐参考书&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#在线电子书&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;在线电子书&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#纸质书&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;纸质书&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#开发方面&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;开发方面&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#架构方面&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;架构方面&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#技术管理方面&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;技术管理方面&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#基础理论-1&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;基础理论&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#工具方面&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;工具方面&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#大数据方面&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;大数据方面&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#技术资源&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;技术资源&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#开源资源&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;开源资源&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#手册文档教程&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;手册、文档、教程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#在线课堂&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;在线课堂&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#会议活动&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;会议、活动&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#常用app&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;常用APP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#找工作&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;找工作&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#工具&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;工具&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#代码托管&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;代码托管&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#文件服务&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;文件服务&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#综合云服务商&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;综合云服务商&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#vps&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;VPS&lt;/a&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;（Toc generated by &lt;a href=&#34;https://github.com/xingshaocheng/simple-php-github-toc&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;simple-php-github-toc&lt;/a&gt; ）&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&#34;数据结构&#34;&gt;数据结构&lt;/h1&gt;

&lt;h2 id=&#34;队列&#34;&gt;队列&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/lemon-flm/p/7877898.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《java队列——queue详细分析》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;非阻塞队列：ConcurrentLinkedQueue(无界线程安全)，采用CAS机制（compareAndSwapObject原子操作）。&lt;/li&gt;
&lt;li&gt;阻塞队列：ArrayBlockingQueue(有界)、LinkedBlockingQueue（无界）、DelayQueue、PriorityBlockingQueue，采用锁机制；使用 ReentrantLock 锁。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/mantu/p/5802393.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《LinkedList、ConcurrentLinkedQueue、LinkedBlockingQueue对比分析》&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;集合&#34;&gt;集合&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/qq_33642117/article/details/52040345&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《Java Set集合的详解》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;链表-数组&#34;&gt;链表、数组&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/wz249863091/article/details/52853360&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《Java集合详解&amp;ndash;什么是List》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;字典-关联数组&#34;&gt;字典、关联数组&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://baike.xsoftlab.net/view/250.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《Java map 详解 - 用法、遍历、排序、常用API等》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;栈&#34;&gt;栈&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/javazejian/article/details/53362993&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《java数据结构与算法之栈（Stack）设计与实现》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.runoob.com/java/java-stack-class.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《Java Stack 类》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/f2006116/article/details/51375225&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《java stack的详细实现分析》&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Stack 是线程安全的。&lt;/li&gt;
&lt;li&gt;内部使用数组保存数据，不够时翻倍。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;树&#34;&gt;树&lt;/h2&gt;

&lt;h3 id=&#34;二叉树&#34;&gt;二叉树&lt;/h3&gt;

&lt;p&gt;每个节点最多有两个叶子节点。
*  &lt;a href=&#34;https://blog.csdn.net/cai2016/article/details/52589952&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《二叉树》&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;完全二叉树&#34;&gt;完全二叉树&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://baike.baidu.com/item/%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91/7773232?fr=aladdin&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《完全二叉树》&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;叶节点只能出现在最下层和次下层，并且最下面一层的结点都集中在该层最左边的若干位置的二叉树。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;平衡二叉树&#34;&gt;平衡二叉树&lt;/h3&gt;

&lt;p&gt;左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。
* &lt;a href=&#34;http://www.cnblogs.com/polly333/p/4798944.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《浅谈数据结构-平衡二叉树》&lt;/a&gt;
* &lt;a href=&#34;http://www.cnblogs.com/yangecnu/p/Introduce-2-3-Search-Tree.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《浅谈算法和数据结构: 八 平衡查找树之2-3树》&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;二叉查找树-bst&#34;&gt;二叉查找树（BST）&lt;/h3&gt;

&lt;p&gt;二叉查找树（Binary Search Tree），也称有序二叉树（ordered binary tree）,排序二叉树（sorted binary tree）。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cnblogs.com/yangecnu/p/Introduce-Binary-Search-Tree.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《浅谈算法和数据结构: 七 二叉查找树》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;红黑树&#34;&gt;红黑树&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/sun_tttt/article/details/65445754&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《最容易懂得红黑树》&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;添加阶段后，左旋或者右旋从而再次达到平衡。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cnblogs.com/yangecnu/p/Introduce-Red-Black-Tree.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《浅谈算法和数据结构: 九 平衡查找树之红黑树》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;b-b-b-树&#34;&gt;B，B+，B*树&lt;/h3&gt;

&lt;p&gt;MySQL是基于B+树聚集索引组织表&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/aqzwss/article/details/53074186&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《B-树，B+树，B*树详解》&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/bigtree_3721/article/details/73632405&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《B-树，B+树与B*树的优缺点比较》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;B+树的叶子节点链表结构相比于 B-树便于扫库，和范围检索。&lt;/p&gt;

&lt;h3 id=&#34;lsm-树&#34;&gt;LSM 树&lt;/h3&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;LSM（Log-Structured Merge-Trees）和 B+ 树相比，是牺牲了部分读的性能来换取写的性能(通过批量写入)，实现读写之间的平衡。
Hbase、LevelDB、Tair（Long DB）、nessDB 采用 LSM 树的结构。LSM可以快速建立索引。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/dbanote/article/details/8897599&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《LSM树 VS B+树》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;B+ 树读性能好，但由于需要有序结构，当key比较分散时，磁盘寻道频繁，造成写性能较差。&lt;/li&gt;
&lt;li&gt;LSM 是将一个大树拆分成N棵小树，先写到内存（无寻道问题，性能高），在内存中构建一颗有序小树（有序树），随着小树越来越大，内存的小树会flush到磁盘上。当读时，由于不知道数据在哪棵小树上，因此必须遍历（二分查找）所有的小树，但在每颗小树内部数据是有序的。
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/u014774781/article/details/52105708&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《LSM树（Log-Structured Merge Tree）存储引擎》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;极端的说，基于LSM树实现的HBase的写性能比MySQL高了一个数量级，读性能低了一个数量级。&lt;/li&gt;
&lt;li&gt;优化方式：Bloom filter 替代二分查找；compact 小数位大树，提高查询性能。&lt;/li&gt;
&lt;li&gt;Hbase 中，内存中达到一定阈值后，整体flush到磁盘上、形成一个文件（B+数），HDFS不支持update操作，所以Hbase做整体flush而不是merge update。flush到磁盘上的小树，定期会合并成一个大树。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;bitset&#34;&gt;BitSet&lt;/h2&gt;

&lt;p&gt;经常用于大规模数据的排重检查。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.runoob.com/java/java-bitset-class.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《Java Bitset类》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/caiandyong/article/details/51581160&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《Java BitSet（位集）》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;常用算法&#34;&gt;常用算法&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/gane_cheng/article/details/52652705&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《常见排序算法及对应的时间复杂度和空间复杂度》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;排序-查找算法&#34;&gt;排序、查找算法&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/gane_cheng/article/details/52652705&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《常见排序算法及对应的时间复杂度和空间复杂度》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;选择排序&#34;&gt;选择排序&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/shen-hua/p/5424059.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《Java中的经典算法之选择排序（SelectionSort）》&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;每一趟从待排序的记录中选出最小的元素，顺序放在已排好序的序列最后，直到全部记录排序完毕。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;冒泡排序&#34;&gt;冒泡排序&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/shuaizai88/article/details/73250615&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《冒泡排序的2种写法》&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;相邻元素前后交换、把最大的排到最后。&lt;/li&gt;
&lt;li&gt;时间复杂度 O(n²)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;插入排序&#34;&gt;插入排序&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/hapjin/p/5517667.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《排序算法总结之插入排序》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;快速排序&#34;&gt;快速排序&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://developer.51cto.com/art/201403/430986.htm&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《坐在马桶上看算法：快速排序》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;一侧比另外一侧都大或小。&lt;/p&gt;

&lt;h3 id=&#34;归并排序&#34;&gt;归并排序&lt;/h3&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.cnblogs.com/chengxiao/p/6194356.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《图解排序算法(四)之归并排序》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;分而治之，分成小份排序，在合并(重建一个新空间进行复制)。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;希尔排序&#34;&gt;希尔排序&lt;/h3&gt;

&lt;p&gt;TODO&lt;/p&gt;

&lt;h3 id=&#34;堆排序&#34;&gt;堆排序&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/chengxiao/p/6129630.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《图解排序算法(三)之堆排序》&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;排序过程就是构建最大堆的过程，最大堆：每个结点的值都大于或等于其左右孩子结点的值，堆顶元素是最大值。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;计数排序&#34;&gt;计数排序&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/suvllian/p/5495780.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《计数排序和桶排序》&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;和桶排序过程比较像，差别在于桶的数量。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;桶排序&#34;&gt;桶排序&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.51cto.com/ahalei/1362789&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《【啊哈！算法】最快最简单的排序——桶排序》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/sunjinshengli/article/details/70738527&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《排序算法（三）：计数排序与桶排序》&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;桶排序将[0,1)区间划分为n个相同的大小的子区间，这些子区间被称为桶。&lt;/li&gt;
&lt;li&gt;每个桶单独进行排序，然后再遍历每个桶。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;基数排序&#34;&gt;基数排序&lt;/h3&gt;

&lt;p&gt;按照个位、十位、百位、&amp;hellip;依次来排。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/lemon_tree12138/article/details/51695211&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《排序算法系列：基数排序》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/skywang12345/p/3603669.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《基数排序》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;二分查找&#34;&gt;二分查找&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/coderising/p/5708632.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《二分查找(java实现)》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;要求待查找的序列有序。&lt;/li&gt;
&lt;li&gt;时间复杂度 O(logN)。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/maoyuanming0806/article/details/78176957&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《java实现二分查找-两种方式》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;while + 递归。&lt;/p&gt;

&lt;h3 id=&#34;java-中的排序工具&#34;&gt;Java 中的排序工具&lt;/h3&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/u011410529/article/details/56668545?locationnum=6&amp;amp;fps=1&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《Arrays.sort和Collections.sort实现原理解析》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Collections.sort算法调用的是合并排序。&lt;/li&gt;
&lt;li&gt;Arrays.sort() 采用了2种排序算法 &amp;ndash; 基本类型数据使用快速排序法，对象数组使用归并排序。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;布隆过滤器&#34;&gt;布隆过滤器&lt;/h2&gt;

&lt;p&gt;常用于大数据的排重，比如email，url 等。
核心原理：将每条数据通过计算产生一个指纹（一个字节或多个字节，但一定比原始数据要少很多），其中每一位都是通过随机计算获得，在将指纹映射到一个大的按位存储的空间中。注意：会有一定的错误率。
优点：空间和时间效率都很高。
缺点：随着存入的元素数量增加，误算率随之增加。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://segmentfault.com/a/1190000002729689&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《布隆过滤器 &amp;ndash; 空间效率很高的数据结构》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/zdxiq000/article/details/57626464&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《大量数据去重：Bitmap和布隆过滤器(Bloom Filter)》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/qq_30242609/article/details/71024458&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《基于Redis的布隆过滤器的实现》&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;基于 Redis 的 Bitmap 数据结构。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/lemon_tree12138/article/details/47973715&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《网络爬虫：URL去重策略之布隆过滤器(BloomFilter)的使用》&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;使用Java中的 BitSet 类 和 加权和hash算法。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;字符串比较&#34;&gt;字符串比较&lt;/h2&gt;

&lt;h3 id=&#34;kmp-算法&#34;&gt;KMP 算法&lt;/h3&gt;

&lt;p&gt;KMP：Knuth-Morris-Pratt算法（简称KMP）
核心原理是利用一个“部分匹配表”，跳过已经匹配过的元素。
* &lt;a href=&#34;http://www.ruanyifeng.com/blog/2013/05/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《字符串匹配的KMP算法》&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;深度优先-广度优先&#34;&gt;深度优先、广度优先&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/0kk470/p/7555033.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《广度优先搜索BFS和深度优先搜索DFS》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;贪心算法&#34;&gt;贪心算法&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/MrSaver/p/8641971.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《算法：贪婪算法基础》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/a345017062/article/details/52443781&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《常见算法及问题场景——贪心算法》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;回溯算法&#34;&gt;回溯算法&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/qfikh/article/details/51960331&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《 五大常用算法之四：回溯法》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;剪枝算法&#34;&gt;剪枝算法&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/luningcsdn/article/details/50930276&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《α-β剪枝算法》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;动态规划&#34;&gt;动态规划&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/little-YTMM/p/5372680.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《详解动态规划——邹博讲动态规划》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/yao_zi_jie/article/details/54580283&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《动态规划算法的个人理解》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;朴素贝叶斯&#34;&gt;朴素贝叶斯&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/amds123/article/details/70173402&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《带你搞懂朴素贝叶斯分类算法》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;P(B|A)=P(A|B)P(B)/P(A)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.ruanyifeng.com/blog/2011/08/bayesian_inference_part_one.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《贝叶斯推断及其互联网应用1》&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.ruanyifeng.com/blog/2011/08/bayesian_inference_part_two.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《贝叶斯推断及其互联网应用2》&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;推荐算法&#34;&gt;推荐算法&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.infoq.com/cn/articles/recommendation-algorithm-overview-part01&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《推荐算法综述》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.oschina.net/news/51297/top-10-open-source-recommendation-systems&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《TOP 10 开源的推荐系统简介》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;最小生成树算法&#34;&gt;最小生成树算法&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/luoshixian099/article/details/51908175&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《算法导论&amp;ndash;最小生成树（Kruskal和Prim算法）》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;最短路径算法&#34;&gt;最短路径算法&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/qq_35644234/article/details/60870719&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《Dijkstra算法详解》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;并发&#34;&gt;并发&lt;/h1&gt;

&lt;h2 id=&#34;java-并发&#34;&gt;Java 并发&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/CL0610/Java-concurrency&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Java 并发知识合集&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/CL0610/Java-concurrency/blob/master/Java并发知识图谱.png&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;JAVA并发知识图谱&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;多线程&#34;&gt;多线程&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.importnew.com/18459.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《40个Java多线程问题总结》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;线程安全&#34;&gt;线程安全&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/zhanht/p/5450325.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《Java并发编程——线程安全及解决机制简介》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;一致性-事务&#34;&gt;一致性、事务&lt;/h2&gt;

&lt;h3 id=&#34;事务-acid-特性&#34;&gt;事务 ACID 特性&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/u012440687/article/details/52116108&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《数据库事务ACID特性》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;事务的隔离级别&#34;&gt;事务的隔离级别&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;未提交读：一个事务可以读取另一个未提交的数据，容易出现脏读的情况。&lt;/li&gt;
&lt;li&gt;读提交：一个事务等另外一个事务提交之后才可以读取数据，但会出现不可重复读的情况（多次读取的数据不一致），读取过程中出现UPDATE操作，会多。（大多数数据库默认级别是RC，比如SQL Server，Oracle），读取的时候不可以修改。&lt;/li&gt;
&lt;li&gt;可重复读： 同一个事务里确保每次读取的时候，获得的是同样的数据，但不保障原始数据被其他事务更新（幻读），Mysql InnoDB 就是这个级别。&lt;/li&gt;

&lt;li&gt;&lt;p&gt;序列化：所有事物串行处理（牺牲了效率）&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/qq_33290787/article/details/51924963&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《理解事务的4种隔离级别》&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/z-sm/p/7245981.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;数据库事务的四大特性及事务隔离级别&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://blog.sina.com.cn/s/blog_499740cb0100ugs7.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《MySQL的InnoDB的幻读问题 》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;幻读的例子非常清楚。&lt;/li&gt;
&lt;li&gt;通过 SELECT &amp;hellip; FOR UPDATE 解决。
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://draveness.me/mysql-innodb&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《一篇文章带你读懂MySQL和InnoDB》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;图解脏读、不可重复读、幻读问题。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;mvcc&#34;&gt;MVCC&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/chenpingzhao/p/5065316.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《【mysql】关于innodb中MVCC的一些理解》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;innodb 中 MVCC 用在 Repeatable-Read 隔离级别。&lt;/li&gt;
&lt;li&gt;MVCC 会产生幻读问题（更新时异常。）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/whoamiyang/article/details/51901888&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《轻松理解MYSQL MVCC 实现机制》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;通过隐藏版本列来实现 MVCC 控制，一列记录创建时间、一列记录删除时间，这里的时间&lt;/li&gt;
&lt;li&gt;每次只操作比当前版本小（或等于）的 行。
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;锁&#34;&gt;锁&lt;/h2&gt;

&lt;h3 id=&#34;java中的锁和同步类&#34;&gt;Java中的锁和同步类&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/qifengshi/p/6831055.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《Java中的锁分类》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;主要包括 synchronized、ReentrantLock、和 ReadWriteLock。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/waterystone/p/4920797.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《Java并发之AQS详解》&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://cuisuqiang.iteye.com/blog/2020146&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《Java中信号量 Semaphore》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;有数量控制&lt;/li&gt;
&lt;li&gt;申请用 acquire，申请不要则阻塞；释放用 release。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/davidwang456/p/6094947.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《java开发中的Mutex vs Semaphore》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;简单的说 就是Mutex是排它的，只有一个可以获取到资源， Semaphore也具有排它性，但可以定义多个可以获取的资源的对象。&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;公平锁-非公平锁&#34;&gt;公平锁 &amp;amp; 非公平锁&lt;/h3&gt;

&lt;p&gt;公平锁的作用就是严格按照线程启动的顺序来执行的，不允许其他线程插队执行的；而非公平锁是允许插队的。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/EthanWhite/article/details/55508357&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《公平锁与非公平锁》&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;默认情况下 ReentrantLock 和 synchronized 都是非公平锁。ReentrantLock 可以设置成公平锁。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;悲观锁&#34;&gt;悲观锁&lt;/h3&gt;

&lt;p&gt;悲观锁如果使用不当（锁的条数过多），会引起服务大面积等待。推荐优先使用乐观锁+重试。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/zhiqian-ali/p/6200874.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《【MySQL】悲观锁&amp;amp;乐观锁》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;乐观锁的方式：版本号+重试方式&lt;/li&gt;
&lt;li&gt;悲观锁：通过 select &amp;hellip; for update 进行行锁(不可读、不可写，share 锁可读不可写)。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/Lawson/p/5008741.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《Mysql查询语句使用select.. for update导致的数据库死锁分析》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;mysql的innodb存储引擎实务锁虽然是锁行，但它内部是锁索引的。&lt;/li&gt;
&lt;li&gt;锁相同数据的不同索引条件可能会引起死锁。
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/zejin2008/p/5262751.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《Mysql并发时经典常见的死锁原因及解决方法》&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;乐观锁-cas&#34;&gt;乐观锁 &amp;amp; CAS&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.importnew.com/20472.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《乐观锁的一种实现方式——CAS》&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;和MySQL乐观锁方式相似，只不过是通过和原值进行比较。&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;aba-问题&#34;&gt;ABA 问题&lt;/h3&gt;

&lt;p&gt;由于高并发，在CAS下，更新后可能此A非彼A。通过版本号可以解决，类似于上文Mysql 中提到的的乐观锁。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/549294286/p/3766717.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《Java CAS 和ABA问题》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/li954644351/article/details/50511879&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《Java 中 ABA问题及避免》&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;AtomicStampedReference 和 AtomicStampedReference。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;copyonwrite容器&#34;&gt;CopyOnWrite容器&lt;/h3&gt;

&lt;p&gt;可以对CopyOnWrite容器进行并发的读，而不需要加锁。CopyOnWrite并发容器用于读多写少的并发场景。比如白名单，黑名单，商品类目的访问和更新场景，不适合需要数据强一致性的场景。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/hapjin/p/4840107.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《JAVA中写时复制(Copy-On-Write)Map实现》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;实现读写分离，读取发生在原始数据上，写入发生在副本上。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;不用加锁，通过最终一致实现一致性。
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/a494303877/article/details/53404623&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《聊聊并发-Java中的Copy-On-Write容器》&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;ringbuffer&#34;&gt;RingBuffer&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cnblogs.com/l00l/p/4115001.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《线程安全的无锁RingBuffer的实现【一个读线程，一个写线程】》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;可重入锁-不可重入锁&#34;&gt;可重入锁 &amp;amp; 不可重入锁&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/dj3839/p/6580765.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《可重入锁和不可重入锁》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;通过简单代码举例说明可重入锁和不可重入锁。&lt;/li&gt;
&lt;li&gt;可重入锁指同一个线程可以再次获得之前已经获得的锁。&lt;/li&gt;
&lt;li&gt;可重入锁可以用户避免死锁。&lt;/li&gt;
&lt;li&gt;Java中的可重入锁：synchronized 和 java.util.concurrent.locks.ReentrantLock&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/baizhanshi/p/7211802.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《ReenTrantLock可重入锁（和synchronized的区别）总结》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;synchronized 使用方便，编译器来加锁，是非公平锁。&lt;/li&gt;
&lt;li&gt;ReenTrantLock 使用灵活，锁的公平性可以定制。&lt;/li&gt;
&lt;li&gt;相同加锁场景下，推荐使用 synchronized。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;互斥锁-共享锁&#34;&gt;互斥锁 &amp;amp; 共享锁&lt;/h3&gt;

&lt;p&gt;互斥锁：同时只能有一个线程获得锁。比如，ReentrantLock 是互斥锁，ReadWriteLock 中的写锁是互斥锁。
共享锁：可以有多个线程同时或的锁。比如，Semaphore、CountDownLatch 是共享锁，ReadWriteLock 中的读锁是共享锁。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/liang1101/p/6475555.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《ReadWriteLock场景应用》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;死锁&#34;&gt;死锁&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/yunfenglw/article/details/45950305&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《“死锁”四个必要条件的合理解释》&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;互斥、持有、不可剥夺、环形等待。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/u014039577/article/details/52351626&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Java如何查看死锁？&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;JConsole 可以识别死锁。
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/bohu83/article/details/51135061&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;java多线程系列：死锁及检测&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;jstack 可以显示死锁。
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;操作系统&#34;&gt;操作系统&lt;/h1&gt;

&lt;h2 id=&#34;计算机原理&#34;&gt;计算机原理&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://segmentfault.com/a/1190000003692840&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《操作系统基础知识——操作系统的原理，类型和结构》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;cpu&#34;&gt;CPU&lt;/h2&gt;

&lt;h3 id=&#34;多级缓存&#34;&gt;多级缓存&lt;/h3&gt;

&lt;p&gt;典型的 CPU 有三级缓存，距离核心越近，速度越快，空间越小。L1 一般 32k，L2 一般 256k，L3 一般12M。内存速度需要200个 CPU 周期，CPU 缓存需要1个CPU周期。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/zero__007/article/details/54089730&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《从Java视角理解CPU缓存和伪共享》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;进程&#34;&gt;进程&lt;/h2&gt;

&lt;p&gt;TODO&lt;/p&gt;

&lt;h2 id=&#34;线程&#34;&gt;线程&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/asdf_1024/article/details/78978437&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《线程的生命周期及状态转换详解》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;协程&#34;&gt;协程&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.thinksaas.cn/group/topic/839375/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《终结python协程&amp;mdash;-从yield到actor模型的实现》&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;线程的调度是由操作系统负责，协程调度是程序自行负责&lt;/li&gt;
&lt;li&gt;与线程相比，协程减少了无谓的操作系统切换.&lt;/li&gt;
&lt;li&gt;实际上当遇到IO操作时做切换才更有意义，（因为IO操作不用占用CPU），如果没遇到IO操作，按照时间片切换.
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;linux&#34;&gt;Linux&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.runoob.com/linux/linux-command-manual.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《Linux 命令大全》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;设计模式&#34;&gt;设计模式&lt;/h1&gt;

&lt;h2 id=&#34;设计模式的六大原则&#34;&gt;设计模式的六大原则&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/q291611265/article/details/48465113&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《设计模式的六大原则》&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;开闭原则：对扩展开放,对修改关闭，多使用抽象类和接口。&lt;/li&gt;
&lt;li&gt;里氏替换原则：基类可以被子类替换，使用抽象类继承,不使用具体类继承。&lt;/li&gt;
&lt;li&gt;依赖倒转原则：要依赖于抽象,不要依赖于具体，针对接口编程,不针对实现编程。&lt;/li&gt;
&lt;li&gt;接口隔离原则：使用多个隔离的接口,比使用单个接口好，建立最小的接口。&lt;/li&gt;
&lt;li&gt;迪米特法则：一个软件实体应当尽可能少地与其他实体发生相互作用，通过中间类建立联系。&lt;/li&gt;
&lt;li&gt;合成复用原则：尽量使用合成/聚合,而不是使用继承。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;23种常见设计模式&#34;&gt;23种常见设计模式&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.runoob.com/design-pattern/design-pattern-tutorial.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《设计模式》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/susanws/p/5510229.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《23种设计模式全解析》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ToryZhou/design-pattern&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《设计模式类图与示例》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;应用场景&#34;&gt;应用场景&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://blog.jobbole.com/62314/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《细数JDK里的设计模式》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;结构型模式：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;适配器：用来把一个接口转化成另一个接口，如 java.util.Arrays#asList()。&lt;/li&gt;
&lt;li&gt;桥接模式：这个模式将抽象和抽象操作的实现进行了解耦，这样使得抽象和实现可以独立地变化，如JDBC；&lt;/li&gt;
&lt;li&gt;组合模式：使得客户端看来单个对象和对象的组合是同等的。换句话说，某个类型的方法同时也接受自身类型作为参数，如 Map.putAll，List.addAll、Set.addAll。&lt;/li&gt;
&lt;li&gt;装饰者模式：动态的给一个对象附加额外的功能，这也是子类的一种替代方式，如 java.util.Collections#checkedList|Map|Set|SortedSet|SortedMap。&lt;/li&gt;
&lt;li&gt;享元模式：使用缓存来加速大量小对象的访问时间，如 valueOf(int)。&lt;/li&gt;
&lt;li&gt;代理模式：代理模式是用一个简单的对象来代替一个复杂的或者创建耗时的对象，如 java.lang.reflect.Proxy
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;创建模式:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;抽象工厂模式：抽象工厂模式提供了一个协议来生成一系列的相关或者独立的对象，而不用指定具体对象的类型，如 java.util.Calendar#getInstance()。&lt;/li&gt;
&lt;li&gt;建造模式(Builder)：定义了一个新的类来构建另一个类的实例，以简化复杂对象的创建，如：java.lang.StringBuilder#append()。&lt;/li&gt;
&lt;li&gt;工厂方法：就是 &lt;strong&gt;一个返&lt;/strong&gt;* 回具体对象的方法，而不是多个，如 java.lang.Object#toString()、java.lang.Class#newInstance()。&lt;/li&gt;
&lt;li&gt;原型模式：使得类的实例能够生成自身的拷贝、如：java.lang.Object#clone()。&lt;/li&gt;
&lt;li&gt;单例模式：全局只有一个实例，如 java.lang.Runtime#getRuntime()。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;行为模式：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;责任链模式：通过把请求从一个对象传递到链条中下一个对象的方式，直到请求被处理完毕，以实现对象间的解耦。如 javax.servlet.Filter#doFilter()。&lt;/li&gt;
&lt;li&gt;命令模式：将操作封装到对象内，以便存储，传递和返回，如：java.lang.Runnable。&lt;/li&gt;
&lt;li&gt;解释器模式：定义了一个语言的语法，然后解析相应语法的语句，如，java.text.Format，java.text.Normalizer。&lt;/li&gt;
&lt;li&gt;迭代器模式：提供一个一致的方法来顺序访问集合中的对象，如 java.util.Iterator。&lt;/li&gt;
&lt;li&gt;中介者模式：通过使用一个中间对象来进行消息分发以及减少类之间的直接依赖，java.lang.reflect.Method#invoke()。&lt;/li&gt;
&lt;li&gt;空对象模式：如 java.util.Collections#emptyList()。&lt;/li&gt;
&lt;li&gt;观察者模式：它使得一个对象可以灵活的将消息发送给感兴趣的对象，如 java.util.EventListener。&lt;/li&gt;
&lt;li&gt;模板方法模式：让子类可以重写方法的一部分，而不是整个重写，如 java.util.Collections#sort()。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/hwaggLee/p/4510687.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《Spring-涉及到的设计模式汇总》&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/u012387062/article/details/54719114&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《Mybatis使用的设计模式》&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;单例模式&#34;&gt;单例模式&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/YECrazy/article/details/79481964&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《单例模式的三种实现 以及各自的优缺点》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/ttylinux/p/6498822.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《单例模式－－反射－－防止序列化破坏单例模式》&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;使用枚举类型。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;责任链模式&#34;&gt;责任链模式&lt;/h2&gt;

&lt;p&gt;TODO&lt;/p&gt;

&lt;h2 id=&#34;mvc&#34;&gt;MVC&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.runoob.com/design-pattern/mvc-pattern.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《MVC 模式》&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;模型(model)－视图(view)－控制器(controller)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;ioc&#34;&gt;IOC&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.zhihu.com/question/23277575&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《理解 IOC》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/NancyStartOnce/p/6813162.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《IOC 的理解与解释》&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;正向控制：传统通过new的方式。反向控制，通过容器注入对象。&lt;/li&gt;
&lt;li&gt;作用：用于模块解耦。&lt;/li&gt;
&lt;li&gt;DI：Dependency Injection，即依赖注入，只关心资源使用，不关心资源来源。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;aop&#34;&gt;AOP&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/yanquan345/article/details/19760027&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《轻松理解AOP(面向切面编程)》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/hongwz/p/5764917.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《Spring AOP详解》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.importnew.com/24305.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《Spring AOP的实现原理》&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Spring AOP使用的动态代理，主要有两种方式：JDK动态代理和CGLIB动态代理。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ibm.com/developerworks/cn/java/j-lo-springaopcglib/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《Spring AOP 实现原理与 CGLIB 应用》&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Spring AOP 框架对 AOP 代理类的处理原则是：如果目标对象的实现类实现了接口，Spring AOP 将会采用 JDK 动态代理来生成 AOP 代理类；如果目标对象的实现类没有实现接口，Spring AOP 将会采用 CGLIB 来生成 AOP 代理类&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;uml&#34;&gt;UML&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.w3cschool.cn/uml_tutorial/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《UML教程》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;微服务思想&#34;&gt;微服务思想&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/wintersun/p/6219259.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《微服务架构设计》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.infoq.com/cn/articles/micro-service-technology-stack&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《微服务架构技术栈选型手册》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;康威定律&#34;&gt;康威定律&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://yq.aliyun.com/articles/8611&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《微服务架构的理论基础 - 康威定律》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;定律一：组织沟通方式会通过系统设计表达出来，就是说架构的布局和组织结构会有相似。&lt;/li&gt;
&lt;li&gt;定律二：时间再多一件事情也不可能做的完美，但总有时间做完一件事情。一口气吃不成胖子，先搞定能搞定的。&lt;/li&gt;
&lt;li&gt;定律三：线型系统和线型组织架构间有潜在的异质同态特性。种瓜得瓜，做独立自治的子系统减少沟通成本。&lt;/li&gt;
&lt;li&gt;定律四：大的系统组织总是比小系统更倾向于分解。合久必分，分而治之。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://static.geekbang.org/PDF-%E4%BF%AE%E6%94%B9%E7%89%88-%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4-%E5%9B%BE%E7%89%87-%E6%9D%A8%E6%B3%A2-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84.pdf&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《微服务架构核⼼20讲》&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;运维-统计-技术支持&#34;&gt;运维 &amp;amp; 统计 &amp;amp; 技术支持&lt;/h1&gt;

&lt;h2 id=&#34;常规监控&#34;&gt;常规监控&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/enweitech/article/details/77849205&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《腾讯业务系统监控的修炼之路》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;监控的方式：主动、被动、旁路(比如舆情监控)&lt;/li&gt;
&lt;li&gt;监控类型： 基础监控、服务端监控、客户端监控、
监控、用户端监控&lt;/li&gt;
&lt;li&gt;监控的目标：全、块、准&lt;/li&gt;
&lt;li&gt;核心指标：请求量、成功率、耗时&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.oschina.net/news/67525/monitoring-tools&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《开源还是商用？十大云运维监控工具横评》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Zabbix、Nagios、Ganglia、Zenoss、Open-falcon、监控宝、 360网站服务监控、阿里云监控、百度云观测、小蜜蜂网站监测等。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://developer.51cto.com/art/201612/525373.htm&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《监控报警系统搭建及二次开发经验》&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;命令行监控工具&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://coderxing.gitbooks.io/architecture-evolution/di-er-pian-ff1a-feng-kuang-yuan-shi-ren/44-an-quan-yu-yun-wei/445-fu-wu-qi-zhuang-tai-jian-ce/4451-ming-ling-xing-gong-ju.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《常用命令行监控工具》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;top、sar、tsar、nload&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://blog.jobbole.com/96846/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《20个命令行工具监控 Linux 系统性能》&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://my.oschina.net/feichexia/blog/196575&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《JVM性能调优监控工具jps、jstack、jmap、jhat、jstat、hprof使用详解》&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;apm&#34;&gt;APM&lt;/h2&gt;

&lt;p&gt;APM —  Application Performance Management&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://bigbully.github.io/Dapper-translation/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《Dapper，大规模分布式系统的跟踪系统》&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://opentracing.io&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;CNCF OpenTracing&lt;/a&gt;，&lt;a href=&#34;https://github.com/opentracing-contrib/opentracing-specification-zh&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;中文版&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;主要开源软件，按字母排序&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/apache/incubator-skywalking&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Apache SkyWalking&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dianping/cat&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;CAT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jaegertracing/jaeger&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;CNCF jaeger&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/naver/pinpoint&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Pinpoint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/openzipkin/zipkin&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Zipkin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.infoq.com/cn/articles/apm-Pinpoint-practice&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《开源APM技术选型与实战》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;主要基于 Google的Dapper（大规模分布式系统的跟踪系统） 思想。
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;统计分析&#34;&gt;统计分析&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/25195217&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《流量统计的基础：埋点》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;常用指标：访问与访客、停留时长、跳出率、退出率、转化率、参与度&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.25xt.com/company/17066.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《APP埋点常用的统计工具、埋点目标和埋点内容》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;第三方统计：友盟、百度移动、魔方、App Annie、talking data、神策数据等。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://tech.meituan.com/mt_mobile_analytics_practice.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《美团点评前端无痕埋点实践》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;所谓无痕、即通过可视化工具配置采集节点，在前端自动解析配置并上报埋点数据，而非硬编码。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;持续集成-ci-cd&#34;&gt;持续集成(CI/CD)&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ruanyifeng.com/blog/2015/09/continuous-integration.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《持续集成是什么？》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.testwo.com/article/1170&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《8个流行的持续集成工具》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;jenkins&#34;&gt;Jenkins&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.liaoxuefeng.com/article/001463233913442cdb2d1bd1b1b42e3b0b29eb1ba736c5e000&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《使用Jenkins进行持续集成》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;环境分离&#34;&gt;环境分离&lt;/h3&gt;

&lt;p&gt;开发、测试、生成环境分离。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://my.oschina.net/sancuo/blog/214904&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《开发环境、生产环境、测试环境的基本理解和区》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;自动化运维&#34;&gt;自动化运维&lt;/h2&gt;

&lt;h3 id=&#34;ansible&#34;&gt;Ansible&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ansible.com.cn/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《Ansible中文权威指南》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/heiye123/articles/7855890.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《Ansible基础配置和企业级项目实用案例》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;puppet&#34;&gt;puppet&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/keerya/p/8040071.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《自动化运维工具——puppet详解》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;chef&#34;&gt;chef&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ibm.com/developerworks/cn/cloud/library/1407_caomd_chef/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《Chef 的安装与使用》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;测试&#34;&gt;测试&lt;/h2&gt;

&lt;h3 id=&#34;tdd-理论&#34;&gt;TDD 理论&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jianshu.com/p/62f16cd4fef3&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《深度解读 - TDD（测试驱动开发）》&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;基于测试用例编码功能代码，XP（Extreme Programming）的核心实践.&lt;/li&gt;
&lt;li&gt;好处：一次关注一个点，降低思维负担；迎接需求变化或改善代码的设计；提前澄清需求；快速反馈；&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;单元测试&#34;&gt;单元测试&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/happyzm/p/6482886.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《Java单元测试之JUnit篇》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/hotdust/article/details/53406086&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《JUnit 4 与 TestNG 对比》&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;TestNG 覆盖 JUnit 功能，适用于更复杂的场景。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/wqetfg/article/details/50900512&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《单元测试主要的测试功能点》&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;模块接口测试、局部数据结构测试、路径测试 、错误处理测试、边界条件测试 。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;压力测试&#34;&gt;压力测试&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/blueheart20/article/details/52170790&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《Apache ab 测试使用指南》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/binyue/p/6141088.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《大型网站压力测试及优化方案》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://news.chinabyte.com/466/14126966.shtml&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《10大主流压力/负载/性能测试工具推荐》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://quentinxxz.iteye.com/blog/2249799&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《真实流量压测工具 tcpcopy应用浅析》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/jwentest/p/7136727.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《nGrinder 简易使用教程》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;全链路压测&#34;&gt;全链路压测&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.infoq.com/cn/articles/jd-618-upgrade-full-link-voltage-test-program-forcebot&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《京东618：升级全链路压测方案，打造军演机器人ForceBot》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/30306892&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《饿了么全链路压测的探索与实践》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/28355759&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《四大语言，八大框架｜滴滴全链路压测解决之道》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jianshu.com/p/27060fd61f72&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《全链路压测经验》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;a-b-灰度-蓝绿测试&#34;&gt;A/B 、灰度、蓝绿测试&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://testerhome.com/topics/11165&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《技术干货 | AB 测试和灰度发布探索及实践》&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://blog.51cto.com/purplegrape/1403123&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《nginx 根据IP 进行灰度发布》&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.v2ex.com/t/344341&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《蓝绿部署、A/B 测试以及灰度发布》&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;虚拟化&#34;&gt;虚拟化&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/enweitech/article/details/52910082&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《VPS的三种虚拟技术OpenVZ、Xen、KVM优缺点比较》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;kvm&#34;&gt;KVM&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.chinaunix.net/uid-20201831-id-5775661.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《KVM详解，太详细太深入了，经典》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.coderxing.com/kvm-install.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《【图文】KVM 虚拟机安装详解》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;xen&#34;&gt;Xen&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/sddai/p/5931201.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《Xen虚拟化基本原理详解》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;openvz&#34;&gt;OpenVZ&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/longerzone/article/details/44829255&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《开源Linux容器 OpenVZ 快速上手指南》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;容器技术&#34;&gt;容器技术&lt;/h2&gt;

&lt;h3 id=&#34;docker&#34;&gt;Docker&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/SzeCheng/p/6822905.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《几张图帮你理解 docker 基本原理及快速入门》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://draveness.me/docker&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《Docker 核心技术与实现原理》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.runoob.com/docker/docker-tutorial.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《Docker 教程》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;云技术&#34;&gt;云技术&lt;/h2&gt;

&lt;h3 id=&#34;openstack&#34;&gt;OpenStack&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/klb561/p/8660264.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《OpenStack构架知识梳理》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;devops&#34;&gt;DevOps&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/jetzhang/p/6068773.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《一分钟告诉你究竟DevOps是什么鬼？》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.infoq.com/cn/articles/detail-analysis-of-devops&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《DevOps详解》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;文档管理&#34;&gt;文档管理&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.confluence.cn/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Confluence-收费文档管理系统&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;GitLab?&lt;/li&gt;
&lt;li&gt;Wiki&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;中间件&#34;&gt;中间件&lt;/h1&gt;

&lt;h2 id=&#34;web-server&#34;&gt;Web Server&lt;/h2&gt;

&lt;h3 id=&#34;nginx&#34;&gt;Nginx&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/qq_25797077/article/details/52200722&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《Ngnix的基本学习-多进程和Apache的比较》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Nginx 通过异步非阻塞的事件处理机制实现高并发。Apache 每个请求独占一个线程，非常消耗系统资源。&lt;/li&gt;
&lt;li&gt;事件驱动适合于IO密集型服务(Nginx)，多进程或线程适合于CPU密集型服务(Apache)，所以Nginx适合做反向代理，而非web服务器使用。&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/cunkouzh/p/5410154.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《nginx与Apache的对比以及优缺点》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;nginx只适合静态和反向代理，不适合处理动态请求。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;openresty&#34;&gt;OpenResty&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://openresty.org/cn/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;官方网站&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.linkedkeeper.com/detail/blog.action?bid=1034&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《浅谈 OpenResty》&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;通过 Lua 模块可以在Nginx上进行开发。&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://openresty.org/download/agentzh-nginx-tutorials-zhcn.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;agentzh 的 Nginx 教程&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;tengine&#34;&gt;Tengine&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://tengine.taobao.org/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;官方网站&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;apache-httpd&#34;&gt;Apache Httpd&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://httpd.apache.org/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;官方网站&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;tomcat&#34;&gt;Tomcat&lt;/h3&gt;

&lt;h4 id=&#34;架构原理&#34;&gt;架构原理&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/hggen/p/6264475.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《TOMCAT原理详解及请求过程》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/crazylqy/p/4706223.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《Tomcat服务器原理详解》&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.ibm.com/developerworks/cn/java/j-lo-tomcat1/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《Tomcat 系统架构与设计模式,第 1 部分: 工作原理》&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/xlgen157387/article/details/79006434&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《四张图带你了解Tomcat系统架构》&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.futurehosting.com/blog/jboss-vs-tomcat-choosing-a-java-application-server/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《JBoss vs. Tomcat: Choosing A Java Application Server》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tomcat 是轻量级的 Serverlet 容器，没有实现全部 JEE 特性（比如持久化和事务处理），但可以通过其他组件代替，比如Spring。&lt;/li&gt;
&lt;li&gt;Jboss 实现全部了JEE特性，软件开源免费、文档收费。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;调优方案&#34;&gt;调优方案&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/sunfenqing/p/7339058.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《Tomcat 调优方案》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;启动NIO模式（或者APR）；调整线程池；禁用AJP连接器（Nginx+tomcat的架构，不需要AJP）；&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://blog.chinaunix.net/uid-20662363-id-3012760.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《tomcat http协议与ajp协议》&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://dmouse.iteye.com/blog/1354527&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《AJP与HTTP比较和分析》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;AJP 协议（8009端口）用于降低和前端Server（如Apache，而且需要支持AJP协议）的连接数(前端)，通过长连接提高性能。&lt;/li&gt;
&lt;li&gt;并发高时，AJP协议优于HTTP协议。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;jetty&#34;&gt;Jetty&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ibm.com/developerworks/cn/java/j-lo-jetty/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《Jetty 的工作原理以及与 Tomcat 的比较》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/doutao6677/article/details/51957288&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《jetty和tomcat优势比较》&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;架构比较:Jetty的架构比Tomcat的更为简单。&lt;/li&gt;
&lt;li&gt;性能比较：Jetty和Tomcat性能方面差异不大，Jetty默认采用NIO结束在处理I/O请求上更占优势，Tomcat默认采用BIO处理I/O请求，Tomcat适合处理少数非常繁忙的链接，处理静态资源时性能较差。&lt;/li&gt;
&lt;li&gt;其他方面：Jetty的应用更加快速，修改简单，对新的Servlet规范的支持较好;Tomcat 对JEE和Servlet 支持更加全面。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;缓存&#34;&gt;缓存&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/clementad/article/details/48229243&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《缓存失效策略（FIFO 、LRU、LFU三种算法的区别）》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;本地缓存&#34;&gt;本地缓存&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://coderxing.gitbooks.io/architecture-evolution/di-er-pian-ff1a-feng-kuang-yuan-shi-ren/42-xing-neng-zhi-ben-di-huan-cun/421-ying-yong-ceng-ben-di-huan-cun/4211.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《HashMap本地缓存》&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://coderxing.gitbooks.io/architecture-evolution/di-er-pian-ff1a-feng-kuang-yuan-shi-ren/42-xing-neng-zhi-ben-di-huan-cun/421-ying-yong-ceng-ben-di-huan-cun/4212-ehcache.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《EhCache本地缓存》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;堆内、堆外、磁盘三级缓存。&lt;/li&gt;
&lt;li&gt;可按照缓存空间容量进行设置。&lt;/li&gt;
&lt;li&gt;按照时间、次数等过期策略。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://coderxing.gitbooks.io/architecture-evolution/di-er-pian-ff1a-feng-kuang-yuan-shi-ren/42-xing-neng-zhi-ben-di-huan-cun/421-ying-yong-ceng-ben-di-huan-cun/4213-guava-cache.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《Guava Cache》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;简单轻量、无堆外、磁盘缓存。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://coderxing.gitbooks.io/architecture-evolution/di-er-pian-ff1a-feng-kuang-yuan-shi-ren/42-xing-neng-zhi-ben-di-huan-cun/422-fu-wu-duan-ben-di-huan-cun/nginx-ben-di-huan-cun.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《Nginx本地缓存》&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://coderxing.gitbooks.io/architecture-evolution/di-er-pian-ff1a-feng-kuang-yuan-shi-ren/42-xing-neng-zhi-ben-di-huan-cun/422-fu-wu-duan-ben-di-huan-cun/4222-pagespeed.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《Pagespeed—懒人工具，服务器端加速》&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;客户端缓存&#34;&gt;客户端缓存&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://coderxing.gitbooks.io/architecture-evolution/di-er-pian-ff1a-feng-kuang-yuan-shi-ren/42-xing-neng-zhi-ben-di-huan-cun/423-ke-hu-duan-huan-cun.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《浏览器端缓存》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;主要是利用 Cache-Control 参数。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/qHm_dJBhVbv0pJs8Crp77w&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《H5 和移动端 WebView 缓存机制解析与实战》&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;服务端缓存&#34;&gt;服务端缓存&lt;/h2&gt;

&lt;h3 id=&#34;web缓存&#34;&gt;Web缓存&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jiangwenyuan/nuster&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;nuster&lt;/a&gt; - nuster cache&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/varnishcache/varnish-cache&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;varnish&lt;/a&gt; - varnish cache&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/squid-cache/squid&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;squid&lt;/a&gt; - squid cache&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;memcached&#34;&gt;Memcached&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.runoob.com/Memcached/Memcached-tutorial.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《Memcached 教程》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/chenleixing/article/details/47035453&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《深入理解Memcached原理》&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;采用多路复用技术提高并发性。&lt;/li&gt;
&lt;li&gt;slab分配算法： memcached给Slab分配内存空间，默认是1MB。分配给Slab之后 把slab的切分成大小相同的chunk，Chunk是用于缓存记录的内存空间，Chunk 的大小默认按照1.25倍的速度递增。好处是不会频繁申请内存，提高IO效率，坏处是会有一定的内存浪费。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jianshu.com/p/36e5cd400580&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《Memcached软件工作原理》&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://zhihuzeye.com/archives/2361&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《Memcache技术分享：介绍、使用、存储、算法、优化、命中率》&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/liu251890347/article/details/37690045&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《memcache 中 add 、 set 、replace 的区别》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;区别在于当key存在还是不存在时，返回值是true和false的。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://pan.baidu.com/s/1qX00Lti?errno=0&amp;amp;errmsg=Auth%20Login%20Sucess&amp;amp;&amp;amp;bduss=&amp;amp;ssnerror=0&amp;amp;traceid=&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;《memcached全面剖析》&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;redis&#34;&gt;Redis&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.runoob.com/redis/redis-tutorial.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《Redis 教程》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/wcf373722432/article/details/78678504&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《redis底层原理》&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;使用 ziplist 存储链表，ziplist是一种压缩链表，它的好处是更能节省内存空间，因为它所存储的内容都是在连续的内存区域当中的。&lt;/li&gt;
&lt;li&gt;使用 skiplist(跳跃表)来存储有序集合对象、查找上先从高Level查起、时间复杂度和红黑树相当，实现容易，无锁、并发性好。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://doc.redisfans.com/topic/persistence.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《Redis持久化方式》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;RDB方式：定期备份快照，常用于灾难恢复。优点：通过fork出的进程进行备份，不影响主进程、RDB 在恢复大数据集时的速度比 AOF 的恢复速度要快。缺点：会丢数据。&lt;/li&gt;
&lt;li&gt;AOF方式：保存操作日志方式。优点：恢复时数据丢失少，缺点：文件大，回复慢。&lt;/li&gt;
&lt;li&gt;也可以两者结合使用。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/chunlongyu/article/details/53346436&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《分布式缓存&amp;ndash;序列3&amp;ndash;原子操作与CAS乐观锁》&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;架构&#34;&gt;架构&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/sunhuiliang85/article/details/73656830&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《Redis单线程架构》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;回收策略&#34;&gt;回收策略&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/qq_29108585/article/details/63251491&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《redis的回收策略》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;tair&#34;&gt;Tair&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/alibaba/tair&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;官方网站&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.csdn.net/farphone/article/details/53522383&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《Tair和Redis的对比》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;特点：可以配置备份节点数目，通过异步同步到备份节点&lt;/li&gt;
&lt;li&gt;一致性Hash算法。&lt;/li&gt;
&lt;li&gt;架构：和Hadoop 的设计思想类似，有Configserver，DataServer，Configserver 通过心跳来检测，Configserver也有主备关系。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;几种存储引擎:
* MDB，完全内存性，可以用来存储Session等数据。
* Rdb（类似于Redis），轻量化，去除了aof之类的操作，支持Restfull操作
* LDB（LevelDB存储引擎），持久化存储，LDB 作为rdb的持久化，google实现，比较高效，理论基础是LSM(Log-Structured-Merge Tree)算法，现在内存中修改数据，达到一定量时（和内存汇总的旧数据一同写入磁盘）再写入磁盘，存储更加高效，县比喻Hash算法。
* Tair采用共享内存来存储数据，如果服务挂掉（非服务器），重启服务之后，数据亦然还在。&lt;/p&gt;

&lt;h2 id=&#34;消息队列&#34;&gt;消息队列&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/charlesblc/p/6045238.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《消息队列-推/拉模式学习 &amp;amp; ActiveMQ及JMS学习》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;RabbitMQ 消费者默认是推模式（也支持拉模式）。&lt;/li&gt;
&lt;li&gt;Kafka 默认是拉模式。&lt;/li&gt;
&lt;li&gt;Push方式：优点是可以尽可能快地将消息发送给消费者，缺点是如果消费者处理能力跟不上，消费者的缓冲区可能会溢出。&lt;/li&gt;
&lt;li&gt;Pull方式：优点是消费端可以按处理能力进行拉去，缺点是会增加消息延迟。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/yunfeng482/article/details/72856762&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《Kafka、RabbitMQ、RocketMQ等消息中间件的对比 —— 消息发送性能和区别》&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;消息总线&#34;&gt;消息总线&lt;/h3&gt;

&lt;p&gt;消息总线相当于在消息队列之上做了一层封装，统一入口，统一管控、简化接入成本。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/yanghua_kobe/article/details/43877281&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《消息总线VS消息队列》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;消息的顺序&#34;&gt;消息的顺序&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/cjsblog/p/8267892.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《如何保证消费者接收消息的顺序》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;rabbitmq&#34;&gt;RabbitMQ&lt;/h3&gt;

&lt;p&gt;支持事务，推拉模式都是支持、适合需要可靠性消息传输的场景。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/whoamiyang/article/details/54954780&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《RabbitMQ的应用场景以及基本原理介绍》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jianshu.com/p/79ca08116d57&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《消息队列之 RabbitMQ》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/u013256816/article/details/55515234&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《RabbitMQ之消息确认机制（事务+Confirm）》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;rocketmq&#34;&gt;RocketMQ&lt;/h3&gt;

&lt;p&gt;Java实现，推拉模式都是支持，吞吐量逊于Kafka。可以保证消息顺序。
* &lt;a href=&#34;https://www.jianshu.com/p/824066d70da8&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《RocketMQ 实战之快速入门》&lt;/a&gt;
* &lt;a href=&#34;http://www.iocoder.cn/categories/RocketMQ/?vip&amp;amp;architect-awesome&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《RocketMQ 源码解析》&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;activemq&#34;&gt;ActiveMQ&lt;/h3&gt;

&lt;p&gt;纯Java实现，兼容JMS，可以内嵌于Java应用中。
* &lt;a href=&#34;https://www.cnblogs.com/wintersun/p/3962302.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《ActiveMQ消息队列介绍》&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;kafka&#34;&gt;Kafka&lt;/h3&gt;

&lt;p&gt;高吞吐量、采用拉模式。适合高IO场景，比如日志同步。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://kafka.apache.org/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;官方网站&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/allthesametome/article/details/47362451&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《各消息队列对比，Kafka深度解析，众人推荐，精彩好文！》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://lxw1234.com/archives/2015/10/538.htm&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《Kafka分区机制介绍与示例》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;redis-消息推送&#34;&gt;Redis 消息推送&lt;/h3&gt;

&lt;p&gt;生产者、消费者模式完全是客户端行为，list 和 拉模式实现，阻塞等待采用 blpop 指令。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/qq_34212276/article/details/78455004&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《Redis学习笔记之十：Redis用作消息队列》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;zeromq&#34;&gt;ZeroMQ&lt;/h3&gt;

&lt;p&gt;TODO&lt;/p&gt;

&lt;h2 id=&#34;定时调度&#34;&gt;定时调度&lt;/h2&gt;

&lt;h3 id=&#34;单机定时调度&#34;&gt;单机定时调度&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/shuaiqing/p/7742382.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《linux定时任务cron配置》&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://my.oschina.net/daquan/blog/483305&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《Linux cron运行原理》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;fork 进程 + sleep 轮询&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/drift-ice/p/3817269.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《Quartz使用总结》&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/wenniuwuren/article/details/42082981/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《Quartz源码解析 &amp;mdash;- 触发器按时启动原理》&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.jianshu.com/p/bab8e4e32952&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《quartz原理揭秘和源码解读》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;定时调度在 QuartzSchedulerThread 代码中，while()无限循环，每次循环取出时间将到的trigger，触发对应的job，直到调度器线程被关闭。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;分布式定时调度&#34;&gt;分布式定时调度&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/qq_16216221/article/details/70314337&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《这些优秀的国产分布式任务调度系统，你用过几个？》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;opencron、LTS、XXL-JOB、Elastic-Job、Uncode-Schedule、Antares&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/zhenyuyaodidiao/p/4755649.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《Quartz任务调度的基本实现原理》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Quartz集群中，独立的Quartz节点并不与另一其的节点或是管理节点通信，而是通过相同的数据库表来感知到另一Quartz应用的&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.iocoder.cn/categories/Elastic-Job-Lite/?vip&amp;amp;architect-awesome&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《Elastic-Job-Lite 源码解析》&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.iocoder.cn/categories/Elastic-Job-Cloud/?vip&amp;amp;architect-awesome&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《Elastic-Job-Cloud 源码解析》&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;rpc&#34;&gt;RPC&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/top_code/article/details/54615853&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《从零开始实现RPC框架 - RPC原理及实现》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;核心角色：Server: 暴露服务的服务提供方、Client: 调用远程服务的服务消费方、Registry: 服务注册与发现的注册中心。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/testcs_dn/article/details/78050590&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《分布式RPC框架性能大比拼 dubbo、motan、rpcx、gRPC、thrift的性能比较》&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;dubbo&#34;&gt;Dubbo&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://dubbo.apache.org/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;官方网站&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/steven520213/p/7606598.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;dubbo实现原理简单介绍&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;** SPI **
TODO&lt;/p&gt;

&lt;h3 id=&#34;thrift&#34;&gt;Thrift&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://thrift.apache.org/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;官方网站&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/kesonyk/article/details/50924489&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《Thrift RPC详解》&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;支持多语言，通过中间语言定义接口。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;grpc&#34;&gt;gRPC&lt;/h3&gt;

&lt;p&gt;服务端可以认证加密，在外网环境下，可以保证数据安全。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://grpc.io/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;官方网站&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/LBSer/p/4853234.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《你应该知道的RPC原理》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;数据库中间件&#34;&gt;数据库中间件&lt;/h2&gt;

&lt;h3 id=&#34;sharding-jdbc&#34;&gt;Sharding Jdbc&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://shardingjdbc.io/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;官网&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/categories/Sharding-JDBC/?vip&amp;amp;architect-awesome&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;源码解析&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;日志系统&#34;&gt;日志系统&lt;/h2&gt;

&lt;h3 id=&#34;日志搜集&#34;&gt;日志搜集&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cjting.me/misc/build-log-system-with-elkb/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《从零开始搭建一个ELKB日志收集系统》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/lzw_2006/article/details/51280058&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《用ELK搭建简单的日志收集分析系统》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/beginmind/p/6058194.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《日志收集系统-探究》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;配置中心&#34;&gt;配置中心&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/ctripcorp/apollo&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Apollo - 携程开源的配置中心应用&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Spring Boot 和 Spring Cloud&lt;/li&gt;
&lt;li&gt;支持推、拉模式更新配置&lt;/li&gt;
&lt;li&gt;支持多种语言&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/u011320740/article/details/78742625&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《基于zookeeper实现统一配置管理》&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/shamo89/p/8016908.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《 Spring Cloud Config 分布式配置中心使用教程》&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;servlet 3.0 异步特性可用于配置中心的客户端
* &lt;a href=&#34;https://www.cnblogs.com/dogdogwang/p/7151866.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《servlet3.0 新特性——异步处理》&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;api-网关&#34;&gt;API 网关&lt;/h2&gt;

&lt;p&gt;主要职责：请求转发、安全认证、协议转换、容灾。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://yunlzheng.github.io/2017/03/14/the-things-about-api-gateway/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《API网关那些儿》&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.infoq.com/cn/news/2016/07/API-background-architecture-floo&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《谈API网关的背景、架构以及落地方案》&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/zhanglh046/article/details/78651993&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《使用Zuul构建API Gateway》&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.iocoder.cn/categories/Spring-Cloud-Gateway/?vip&amp;amp;architect-awesome&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《Spring Cloud Gateway 源码解析》&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/LIq2CiXJQmmjBC0yvYLY5A&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《HTTP API网关选择之一Kong介绍》&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;网络&#34;&gt;网络&lt;/h1&gt;

&lt;h2 id=&#34;协议&#34;&gt;协议&lt;/h2&gt;

&lt;h3 id=&#34;osi-七层协议&#34;&gt;OSI 七层协议&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/Robin-YB/p/6668762.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《OSI七层协议模型、TCP/IP四层模型学习笔记》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;tcp-ip&#34;&gt;TCP/IP&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/onepixel/p/7092302.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《深入浅出 TCP/IP 协议》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/whuslei/article/details/6667471/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《TCP协议中的三次握手和四次挥手》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;http&#34;&gt;HTTP&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/wangning528/p/6388464.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《http协议详解(超详细)》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;http2-0&#34;&gt;HTTP2.0&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/zhuyiquan/article/details/69257126&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《HTTP 2.0 原理详细分析》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/u012657197/article/details/77877840&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《HTTP2.0的基本单位为二进制帧》&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;利用二进制帧负责传输。&lt;/li&gt;
&lt;li&gt;多路复用。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;https&#34;&gt;HTTPS&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/zhangshitong/p/6478721.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《https原理通俗了解》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;使用非对称加密协商加密算法&lt;/li&gt;
&lt;li&gt;使用对称加密方式传输数据&lt;/li&gt;
&lt;li&gt;使用第三方机构签发的证书，来加密公钥，用于公钥的安全传输、防止被中间人串改。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/enweitech/article/details/53213862&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《八大免费SSL证书-给你的网站免费添加Https安全加密》&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;网络模型&#34;&gt;网络模型&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://blog.51cto.com/litaotao/1289790&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《web优化必须了解的原理之I/o的五种模型和web的三种工作模式》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;五种I/O模型：阻塞I/O，非阻塞I/O，I/O复用、事件(信号)驱动I/O、异步I/O，前四种I/O属于同步操作，I/O的第一阶段不同、第二阶段相同，最后的一种则属于异步操作。&lt;/li&gt;
&lt;li&gt;三种 Web Server 工作方式：Prefork(多进程)、Worker方式(线程方式)、Event方式。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.cnblogs.com/Anker/p/3265058.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《select、poll、epoll之间的区别总结》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;select，poll，epoll本质上都是同步I/O，因为他们都需要在读写事件就绪后自己负责进行读写，也就是说这个读写过程是阻塞的。&lt;/li&gt;
&lt;li&gt;select 有打开文件描述符数量限制，默认1024（2048 for x64），100万并发，就要用1000个进程、切换开销大；poll采用链表结构，没有数量限制。&lt;/li&gt;
&lt;li&gt;select，poll “醒着”的时候要遍历整个fd集合，而epoll在“醒着”的时候只要判断一下就绪链表是否为空就行了，通过回调机制节省大量CPU时间；select，poll每次调用都要把fd集合从用户态往内核态拷贝一次，而epoll只要一次拷贝。&lt;/li&gt;
&lt;li&gt;poll会随着并发增加，性能逐渐下降，epoll采用红黑树结构，性能稳定，不会随着连接数增加而降低。
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://xingyunbaijunwei.blog.163.com/blog/static/76538067201241685556302/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《select，poll，epoll比较  》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;在连接数少并且连接都十分活跃的情况下，select和poll的性能可能比epoll好，毕竟epoll的通知机制需要很多函数回调。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/geason/p/5774096.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《深入理解Java NIO》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;NIO 是一种同步非阻塞的 IO 模型。同步是指线程不断轮询 IO 事件是否就绪，非阻塞是指线程在等待 IO 的时候，可以同时做其他任务&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/skiof007/article/details/52873421&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《BIO与NIO、AIO的区别》&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/u013074465/article/details/46276967&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《两种高效的服务器设计模型：Reactor和Proactor模型》&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;epoll&#34;&gt;Epoll&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/fnlingnzb-learner/p/5835573.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《epoll使用详解（精髓）》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;java-nio&#34;&gt;Java NIO&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/geason/p/5774096.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《深入理解Java NIO》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/xidianliuy/article/details/51612676&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《Java NIO编写Socket服务器的一个例子》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;kqueue&#34;&gt;kqueue&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cnblogs.com/luminocean/p/5631336.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《kqueue用法简介》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;连接和短连接&#34;&gt;连接和短连接&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/pangguoping/p/5571422.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《TCP/IP系列——长连接与短连接的区别》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;框架&#34;&gt;框架&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/excellentyuxiao/article/details/53390408&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《Netty原理剖析》&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Reactor 模式介绍。&lt;/li&gt;
&lt;li&gt;Netty 是 Reactor 模式的一种实现。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;零拷贝-zero-copy&#34;&gt;零拷贝（Zero-copy）&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/xys1228/p/6088805.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《对于 Netty ByteBuf 的零拷贝(Zero Copy) 的理解》&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;多个物理分离的buffer，通过逻辑上合并成为一个，从而避免了数据在内存之间的拷贝。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;序列化-二进制协议&#34;&gt;序列化(二进制协议)&lt;/h2&gt;

&lt;h3 id=&#34;hessian&#34;&gt;Hessian&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/happyday56/p/4268249.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《Hessian原理分析》&lt;/a&gt;
Binary-RPC;不仅仅是序列化&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;protobuf&#34;&gt;Protobuf&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/antgan/article/details/52103966&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《Protobuf协议的Java应用例子》&lt;/a&gt;
Goolge出品、占用空间和效率完胜其他序列化类库，如Hessian；需要编写  .proto 文件。&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://worktile.com/tech/share/prototol-buffers&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《Protocol Buffers序列化协议及应用》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;关于协议的解释；缺点：可读性差;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/eric520zenobia/article/details/53766571&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《简单的使用 protobuf 和 protostuff》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;protostuff 的好处是不用写 .proto 文件，Java 对象直接就可以序列化。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;数据库&#34;&gt;数据库&lt;/h1&gt;

&lt;h2 id=&#34;基础理论&#34;&gt;基础理论&lt;/h2&gt;

&lt;h3 id=&#34;关系数据库设计的三大范式&#34;&gt;关系数据库设计的三大范式&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/waj6511988/p/7027127.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《数据库的三大范式以及五大约束》&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;第一范式：数据表中的每一列（每个字段）必须是不可拆分的最小单元，也就是确保每一列的原子性；&lt;/li&gt;
&lt;li&gt;第二范式（2NF）：满足1NF后，要求表中的所有列，都必须依赖于主键，而不能有任何一列与主键没有关系，也就是说一个表只描述一件事情；&lt;/li&gt;
&lt;li&gt;第三范式：必须先满足第二范式（2NF），要求：表中的每一列只与主键直接相关而不是间接相关，（表中的每一列只能依赖于主键）；&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;mysql&#34;&gt;MySQL&lt;/h2&gt;

&lt;h3 id=&#34;原理&#34;&gt;原理&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.admin10000.com/document/5372.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《MySQL的InnoDB索引原理详解》&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/xifeijian/article/details/20316775&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《MySQL存储引擎－－MyISAM与InnoDB区别》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;两种类型最主要的差别就是Innodb 支持事务处理与外键和行级锁&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.2cto.com/database/201211/172380.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《myisam和innodb索引实现的不同》&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;innodb&#34;&gt;InnoDB&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://my.oschina.net/kailuncen/blog/1504217&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《一篇文章带你读懂Mysql和InnoDB》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;优化&#34;&gt;优化&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://vdisk.weibo.com/s/muWOT&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《MySQL36条军规》&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/zhouyusheng/p/8038224.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《MYSQL性能优化的最佳20+条经验》&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/when_less_is_more/article/details/70187459&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《SQL优化之道》&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/sivkun/p/7518540.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《mysql数据库死锁的产生原因及解决办法》&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/monkey_d_feilong/article/details/52291556&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《导致索引失效的可能情况》&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/zy_281870667/article/details/51604540&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《 MYSQL分页limit速度太慢优化方法》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;原则上就是缩小扫描范围。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;索引&#34;&gt;索引&lt;/h3&gt;

&lt;h4 id=&#34;聚集索引-非聚集索引&#34;&gt;聚集索引, 非聚集索引&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/no_endless/article/details/77073549&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《MySQL 聚集索引/非聚集索引简述》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/zlcxbb/p/5757245.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《MyISAM和InnoDB的索引实现》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;MyISAM 是非聚集，InnoDB 是聚集&lt;/p&gt;

&lt;h4 id=&#34;复合索引&#34;&gt;复合索引&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/summer0space/p/7247778.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《复合索引的优点和注意事项》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;文中有一处错误：
&amp;gt; 对于复合索引,在查询使用时,最好将条件顺序按找索引的顺序,这样效率最高; select * from table1 where col1=A AND col2=B AND col3=D 如果使用 where col2=B AND col1=A 或者 where col2=B 将不会使用索引&lt;/li&gt;
&lt;li&gt;原文中提到索引是按照“col1，col2，col3”的顺序创建的，而mysql在按照最左前缀的索引匹配原则，且会自动优化 where 条件的顺序，当条件中只有 col2=B AND col1=A 时，会自动转化为 col1=A AND col2=B，所以依然会使用索引。
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/acode/p/7489258.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《MySQL查询where条件的顺序对查询效率的影响》&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;自适应哈希索引-ahi&#34;&gt;自适应哈希索引(AHI)&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/Linux_ever/article/details/62043708&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《InnoDB存储引擎——自适应哈希索引》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;explain&#34;&gt;explain&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://segmentfault.com/a/1190000008131735&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《MySQL 性能优化神器 Explain 使用分析》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;nosql&#34;&gt;NoSQL&lt;/h2&gt;

&lt;h3 id=&#34;mongodb&#34;&gt;MongoDB&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.runoob.com/mongodb/mongodb-tutorial.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;MongoDB 教程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mxdxm.iteye.com/blog/2093603&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《Mongodb相对于关系型数据库的优缺点》&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;优点：弱一致性（最终一致），更能保证用户的访问速度；内置GridFS，支持大容量的存储；Schema-less 数据库，不用预先定义结构；内置Sharding；相比于其他NoSQL，第三方支持丰富；性能优越；&lt;/li&gt;
&lt;li&gt;缺点：mongodb不支持事务操作；mongodb占用空间过大；MongoDB没有如MySQL那样成熟的维护工具，这对于开发和IT运营都是个值得注意的地方；&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;hbase&#34;&gt;Hbase&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.thebigdata.cn/HBase/35831.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《简明 HBase 入门教程（开篇）》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/qiaoyihang/p/6246424.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《深入学习HBase架构原理》&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/youzhouliu/article/details/67632882&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《传统的行存储和（HBase）列存储的区别》&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/lifuxiangcaohui/article/details/39891099&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《Hbase与传统数据库的区别》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;空数据不存储，节省空间，且适用于并发。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/u014091123/article/details/73163088&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《HBase Rowkey设计》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;rowkey 按照字典顺序排列，便于批量扫描。&lt;/li&gt;
&lt;li&gt;通过散列可以避免热点。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;搜索引擎&#34;&gt;搜索引擎&lt;/h1&gt;

&lt;h2 id=&#34;搜索引擎原理&#34;&gt;搜索引擎原理&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jianshu.com/p/0193dc44135b&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《倒排索引&amp;ndash;搜索引擎入门》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;lucene&#34;&gt;Lucene&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/rodge-run/p/6551152.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《Lucene入门简介》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;elasticsearch&#34;&gt;Elasticsearch&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/laoyang360/article/details/52244917&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《Elasticsearch学习，请先看这一篇！》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/cyony/article/details/65437708&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《Elasticsearch索引原理》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;solr&#34;&gt;Solr&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/u011936655/article/details/51960005&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《 Apache Solr入门教程》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/convict_eva/article/details/53537837&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《elasticsearch与solr比较》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;sphinx&#34;&gt;sphinx&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.jobbole.com/101672/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《Sphinx 的介绍和原理探索》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;性能&#34;&gt;性能&lt;/h1&gt;

&lt;h2 id=&#34;性能优化方法论&#34;&gt;性能优化方法论&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/huangwenyi1010/article/details/72673447?ref=myread&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《15天的性能优化工作，5方面的调优经验》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;代码层面、业务层面、数据库层面、服务器层面、前端优化。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/tenglizhe/article/details/44563135&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《系统性能优化的几个方面》&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;容量评估&#34;&gt;容量评估&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/u012528360/article/details/70054156&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《联网性能与容量评估的方法论和典型案例》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MjM5ODYxMDA5OQ==&amp;amp;mid=2651959542&amp;amp;idx=1&amp;amp;sn=2494bbea9a855e0e1c3ccd6d2562a600&amp;amp;scene=21#wechat_redirect&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《互联网架构，如何进行容量设计？》&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;评估总访问量、评估平均访问量QPS、评估高峰QPS、评估系统、单机极限QPS&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;cdn-网络&#34;&gt;CDN 网络&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/wxiaona/p/5867685.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《CDN加速原理》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.zhihu.com/question/20536932&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《国内有哪些比较好的 CDN？》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;连接池&#34;&gt;连接池&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/fysuccess/article/details/66972554&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《主流Java数据库连接池比较与开发配置实战》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;性能调优&#34;&gt;性能调优&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/yethyeth/article/details/73266455&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《九大Java性能调试工具，必备至少一款》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;大数据&#34;&gt;大数据&lt;/h1&gt;

&lt;h2 id=&#34;流式计算&#34;&gt;流式计算&lt;/h2&gt;

&lt;h3 id=&#34;storm&#34;&gt;Storm&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://storm.apache.org/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;官方网站&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/uisoul/article/details/77989927&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《最详细的Storm入门教程》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;flink&#34;&gt;Flink&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/lisi1129/article/details/54844919&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《Flink之一 Flink基本原理介绍》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;kafka-stream&#34;&gt;Kafka Stream&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://yq.aliyun.com/articles/58382&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《Kafka Stream调研：一种轻量级流计算模式》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;应用场景-1&#34;&gt;应用场景&lt;/h3&gt;

&lt;p&gt;例如：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;广告相关实时统计；&lt;/li&gt;
&lt;li&gt;推荐系统用户画像标签实时更新；&lt;/li&gt;
&lt;li&gt;线上服务健康状况实时监测；&lt;/li&gt;
&lt;li&gt;实时榜单；&lt;/li&gt;
&lt;li&gt;实时数据统计。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;hadoop&#34;&gt;Hadoop&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/houbin0912/article/details/72967178&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《用通俗易懂的话说下hadoop是什么,能做什么》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://gitbook.cn/books/5954c9600326c7705af8a92a/index.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《史上最详细的Hadoop环境搭建》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;hdfs&#34;&gt;HDFS&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://segmentfault.com/a/1190000011575458&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《【Hadoop学习】HDFS基本原理》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;mapreduce&#34;&gt;MapReduce&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/oppo62258801/article/details/72884633&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《用通俗易懂的大白话讲解Map/Reduce原理》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/foye12/article/details/78358292&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《 简单的map-reduce的java例子》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;yarn&#34;&gt;Yarn&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cnblogs.com/codeOfLife/p/5492740.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《初步掌握Yarn的架构及原理》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;spark&#34;&gt;Spark&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cnblogs.com/tgzhu/p/5818374.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《Spark(一): 基本架构及原理》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dblab.xmu.edu.cn/blog/1709-2/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《子雨大数据之Spark入门教程(Python版)》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;安全&#34;&gt;安全&lt;/h1&gt;

&lt;h2 id=&#34;web-安全&#34;&gt;web 安全&lt;/h2&gt;

&lt;h3 id=&#34;xss&#34;&gt;XSS&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/qq_21956483/article/details/54377947&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《xss攻击原理与解决方法》&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;csrf&#34;&gt;CSRF&lt;/h3&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://coderxing.gitbooks.io/architecture-evolution/di-san-pian-ff1a-bu-luo/641-web-an-quan-fang-fan/6412-csrf.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《CSRF原理及防范》&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;sql-注入&#34;&gt;SQL 注入&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://coderxing.gitbooks.io/architecture-evolution/di-san-pian-ff1a-bu-luo/641-web-an-quan-fang-fan/6413-sql-zhu-ru.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《SQL注入》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;hash-dos&#34;&gt;Hash Dos&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.freebuf.com/articles/web/14199.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《邪恶的JAVA HASH DOS攻击》&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;利用JsonObject 上传大Json，JsonObject 底层使用HashMap；不同的数据产生相同的hash值，使得构建Hash速度变慢，耗尽CPU。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.it2048.cn/article_hash-collision.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《一种高级的DoS攻击-Hash碰撞攻击》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.iteye.com/news/23939/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《关于Hash Collision DoS漏洞：解析与解决方案》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;脚本注入&#34;&gt;脚本注入&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://coderxing.gitbooks.io/architecture-evolution/di-san-pian-ff1a-bu-luo/641-web-an-quan-fang-fan/6414-shang-chuan-wen-jian-guo-lv.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《上传文件漏洞原理及防范》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;漏洞扫描工具&#34;&gt;漏洞扫描工具&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://coderxing.gitbooks.io/architecture-evolution/di-san-pian-ff1a-bu-luo/6421-dvwa.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《DVWA》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://coderxing.gitbooks.io/architecture-evolution/di-san-pian-ff1a-bu-luo/w3af.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;W3af&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/xygg0801/article/details/53610640&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;OpenVAS详解&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;验证码&#34;&gt;验证码&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/niaonao/article/details/51112686&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《验证码原理分析及实现》&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://my.oschina.net/jiangbianwanghai/blog/1031031&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《详解滑动验证码的实现原理》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;滑动验证码是根据人在滑动滑块的响应时间，拖拽速度，时间，位置，轨迹，重试次数等来评估风险。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/xcj26/p/5242758.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《淘宝滑动验证码研究》&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;ddos-防范&#34;&gt;DDoS 防范&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://netsecurity.51cto.com/art/201601/503799.htm&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《学习手册：DDoS的攻击方式及防御手段》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://netsecurity.51cto.com/art/201406/442756.htm&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《免费DDoS攻击测试工具大合集》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;用户隐私信息保护&#34;&gt;用户隐私信息保护&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;用户密码非明文保存，加动态salt。&lt;/li&gt;
&lt;li&gt;身份证号，手机号如果要显示，用 “*” 替代部分字符。&lt;/li&gt;
&lt;li&gt;联系方式在的显示与否由用户自己控制。&lt;/li&gt;
&lt;li&gt;TODO&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zhidao.baidu.com/question/1988017976673661587.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《个人隐私包括哪些》&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.zhihu.com/question/20137108&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《在互联网上，隐私的范围包括哪些？》&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://coderxing.gitbooks.io/architecture-evolution/di-san-pian-ff1a-bu-luo/642-shu-ju-jia-mi/6425-jia-mi-chang-jing-ff1a-yong-hu-mi-ma-bao-cun.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《用户密码保存》&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;序列化漏洞&#34;&gt;序列化漏洞&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.chaitin.cn/2015-11-11_java_unserialize_rce/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《Lib之过？Java反序列化漏洞通用利用分析》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;加密解密&#34;&gt;加密解密&lt;/h2&gt;

&lt;h3 id=&#34;对称加密&#34;&gt;对称加密&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://coderxing.gitbooks.io/architecture-evolution/di-san-pian-ff1a-bu-luo/642-shu-ju-jia-mi/6421-chang-jian-dui-cheng-jia-mi-suan-fa.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《常见对称加密算法》&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;DES、3DES、Blowfish、AES&lt;/li&gt;
&lt;li&gt;DES 采用 56位秘钥，Blowfish 采用1到448位变长秘钥，AES 128，192和256位长度的秘钥。&lt;/li&gt;
&lt;li&gt;DES 秘钥太短（只有56位）算法目前已经被 AES 取代，并且 AES 有硬件加速，性能很好。
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;哈希算法&#34;&gt;哈希算法&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://coderxing.gitbooks.io/architecture-evolution/di-san-pian-ff1a-bu-luo/642-shu-ju-jia-mi/6422-chang-jian-ha-xi-suan-fa-and-hmac.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《常用的哈希算法》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;MD5 和 SHA-1 已经不再安全，已被弃用。&lt;/li&gt;
&lt;li&gt;目前 SHA-256 是比较安全的。
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/zhangruhong168/article/details/78033202&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《基于Hash摘要签名的公网URL签名验证设计方案》&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;非对称加密&#34;&gt;非对称加密&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://coderxing.gitbooks.io/architecture-evolution/di-san-pian-ff1a-bu-luo/642-shu-ju-jia-mi/6424-chang-yong-fei-dui-cheng-jia-mi-suan-fa.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《常见非对称加密算法》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;RSA、DSA、ECDSA(螺旋曲线加密算法)&lt;/li&gt;
&lt;li&gt;和 RSA 不同的是 DSA 仅能用于数字签名，不能进行数据加密解密，其安全性和RSA相当，但其性能要比RSA快。&lt;/li&gt;

&lt;li&gt;&lt;p&gt;256位的ECC秘钥的安全性等同于3072位的RSA秘钥。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://baijiahao.baidu.com/s?id=1578348858092033763&amp;amp;wfr=spider&amp;amp;for=pc&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《区块链的加密技术》&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;服务器安全&#34;&gt;服务器安全&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.freebuf.com/articles/system/121540.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《Linux强化论：15步打造一个安全的Linux服务器》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;数据安全&#34;&gt;数据安全&lt;/h2&gt;

&lt;h3 id=&#34;数据备份&#34;&gt;数据备份&lt;/h3&gt;

&lt;p&gt;TODO&lt;/p&gt;

&lt;h2 id=&#34;网络隔离&#34;&gt;网络隔离&lt;/h2&gt;

&lt;h3 id=&#34;内外网分离&#34;&gt;内外网分离&lt;/h3&gt;

&lt;p&gt;TODO&lt;/p&gt;

&lt;h3 id=&#34;登录跳板机&#34;&gt;登录跳板机&lt;/h3&gt;

&lt;p&gt;在内外环境中通过跳板机登录到线上主机。
* &lt;a href=&#34;http://blog.51cto.com/zero01/2062618&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《搭建简易堡垒机》&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;授权-认证&#34;&gt;授权、认证&lt;/h2&gt;

&lt;h3 id=&#34;rbac&#34;&gt;RBAC&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/zq8024/p/5003050.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《基于组织角色的权限设计》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/shijiaqi1066/p/3793894.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《权限系统与RBAC模型概述》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/he90227/article/details/38663553&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《Spring整合Shiro做权限控制模块详细案例分析》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;oauth2-0&#34;&gt;OAuth2.0&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《理解OAuth 2.0》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/flashsun/p/7424071.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《一张图搞定OAuth2.0》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;双因素认证-2fa&#34;&gt;双因素认证（2FA）&lt;/h3&gt;

&lt;p&gt;2FA - Two-factor authentication，用于加强登录验证&lt;/p&gt;

&lt;p&gt;常用做法是 登录密码 + 手机验证码（或者令牌Key，类似于与网银的 USB key）&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;【《双因素认证（2FA）教程》】(&lt;a href=&#34;http://www.ruanyifeng.com/blog/2017/11/2fa-tutorial.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;http://www.ruanyifeng.com/blog/2017/11/2fa-tutorial.html&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;单点登录-sso&#34;&gt;单点登录(SSO)&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/ywlaker/p/6113927.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《单点登录原理与简单实现》&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/apereo/cas&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;CAS单点登录框架&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;常用开源框架&#34;&gt;常用开源框架&lt;/h1&gt;

&lt;h2 id=&#34;开源协议&#34;&gt;开源协议&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://coderxing.gitbooks.io/architecture-evolution/chapter1/di-yi-zhang-ff1a-zhun-bei-qi-cheng/12-guan-yu-kai-yuan/123-kai-yuan-xie-yi-de-xuan-ze.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《开源协议的选择》&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://choosealicense.online/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;如何选择一个开源软件协议&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;日志框架&#34;&gt;日志框架&lt;/h2&gt;

&lt;h3 id=&#34;log4j-log4j2&#34;&gt;Log4j、Log4j2&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/u012422446/article/details/51199724&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《log4j 详细讲解》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/vbirdbest/article/details/71751835&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《log4j2 实际使用详解》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://my.oschina.net/OutOfMemory/blog/789267&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《Log4j1,Logback以及Log4j2性能测试对比》&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Log4J 异步日志性能优异。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;logback&#34;&gt;Logback&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/rulon147/article/details/52620541&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《最全LogBack 详解、含java案例和配置说明》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;orm&#34;&gt;ORM&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/sinat_34093604/article/details/53082000&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《ORM框架使用优缺点》&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;主要目的是为了提高开发效率。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;MyBatis：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/winclpt/articles/7511672.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《mybatis缓存机制详解》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;一级缓存是SqlSession级别的缓存，缓存的数据只在SqlSession内有效&lt;/li&gt;
&lt;li&gt;二级缓存是mapper级别的缓存，同一个namespace公用这一个缓存，所以对SqlSession是共享的；使用 LRU 机制清理缓存，通过 cacheEnabled 参数开启。&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/baidu_32877851/article/details/53959268&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《MyBatis学习之代码生成器Generator》&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;网络框架&#34;&gt;网络框架&lt;/h2&gt;

&lt;p&gt;TODO&lt;/p&gt;

&lt;h2 id=&#34;web-框架&#34;&gt;Web 框架&lt;/h2&gt;

&lt;h3 id=&#34;spring-家族&#34;&gt;Spring 家族&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Spring&lt;/strong&gt;
* &lt;a href=&#34;https://www.w3cschool.cn/wkspring/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Spring 简明教程&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Spring Boot&lt;/strong&gt;
* &lt;a href=&#34;http://projects.spring.io/spring-boot/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;官方网站&lt;/a&gt;
* &lt;a href=&#34;http://blog.didispace.com/Spring-Boot%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《Spring Boot基础教程》&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Spring Cloud&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://springboot.fun/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Spring Boot 中文索引站&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://springcloud.cc/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Spring Cloud 中文文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.didispace.com/Spring-Cloud%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《Spring Cloud基础教程》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;工具框架&#34;&gt;工具框架&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/crazylqy/p/4872236.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《Apache Commons 工具类介绍及简单使用》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ifeve.com/google-guava/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《Google guava 中文教程》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;分布式设计&#34;&gt;分布式设计&lt;/h1&gt;

&lt;h2 id=&#34;扩展性设计&#34;&gt;扩展性设计&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/hemin1003/article/details/53633926&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《架构师不可不知的十大可扩展架构》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;总结下来，通用的套路就是分布、缓存及异步处理。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://yq.aliyun.com/articles/38119&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《可扩展性设计之数据切分》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;水平切分+垂直切分&lt;/li&gt;
&lt;li&gt;利用中间件进行分片如，MySQL Proxy。&lt;/li&gt;
&lt;li&gt;利用分片策略进行切分，如按照ID取模。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/deniro_li/article/details/78458306&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《说说如何实现可扩展性的大型网站架构》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;分布式服务+消息队列。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/chaofanwei/article/details/29191073&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《大型网站技术架构（七）&amp;ndash;网站的可扩展性架构》&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;稳定性-高可用&#34;&gt;稳定性 &amp;amp; 高可用&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/hustspy1990/article/details/78008324&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《系统设计：关于高可用系统的一些技术方案》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;可扩展：水平扩展、垂直扩展。 通过冗余部署，避免单点故障。&lt;/li&gt;
&lt;li&gt;隔离：避免单一业务占用全部资源。避免业务之间的相互影响 2. 机房隔离避免单点故障。&lt;/li&gt;
&lt;li&gt;解耦：降低维护成本，降低耦合风险。减少依赖，减少相互间的影响。&lt;/li&gt;
&lt;li&gt;限流：滑动窗口计数法、漏桶算法、令牌桶算法等算法。遇到突发流量时，保证系统稳定。&lt;/li&gt;
&lt;li&gt;降级：紧急情况下释放非核心功能的资源。牺牲非核心业务，保证核心业务的高可用。&lt;/li&gt;
&lt;li&gt;熔断：异常情况超出阈值进入熔断状态，快速失败。减少不稳定的外部依赖对核心服务的影响。&lt;/li&gt;
&lt;li&gt;自动化测试：通过完善的测试，减少发布引起的故障。&lt;/li&gt;
&lt;li&gt;灰度发布：灰度发布是速度与安全性作为妥协，能够有效减少发布故障。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://coolshell.cn/articles/17459.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《关于高可用的系统》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;设计原则：数据不丢(持久化)；服务高可用(服务副本)；绝对的100%高可用很难，目标是做到尽可能多的9，如99.999%（全年累计只有5分钟）。&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;硬件负载均衡&#34;&gt;硬件负载均衡&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/wuyun-blog/p/6186198.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《转！！负载均衡器技术Nginx和F5的优缺点对比》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;主要是和F5对比。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/lcword/p/5773296.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《软/硬件负载均衡产品 你知多少？》&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;软件负载均衡&#34;&gt;软件负载均衡&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/tianzhiliang/articles/2317808.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《几种负载均衡算法》&lt;/a&gt;
轮寻、权重、负载、最少连接、QoS&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://coderxing.gitbooks.io/architecture-evolution/di-san-pian-ff1a-bu-luo/611-dns-fang-shi.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《DNS负载均衡》&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;配置简单，更新速度慢。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://coderxing.gitbooks.io/architecture-evolution/di-san-pian-ff1a-bu-luo/613-nginx-fu-zai-jun-heng.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《Nginx负载均衡》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;简单轻量、学习成本低；主要适用于web应用。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/edisonchou/p/4281978.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《借助LVS+Keepalived实现负载均衡 》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;配置比较负载、只支持到4层，性能较高。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.ttlsa.com/linux/haproxy-study-tutorial/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《HAProxy用法详解 全网最详细中文文档》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;支持到七层（比如HTTP）、功能比较全面，性能也不错。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://blog.itpub.net/25704976/viewspace-1319781/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《Haproxy+Keepalived+MySQL实现读均衡负载》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;主要是用户读请求的负载均衡。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/lylife/p/5584019.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《rabbitmq+haproxy+keepalived实现高可用集群搭建》&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;限流&#34;&gt;限流&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/haoxinyue/p/6792309.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《谈谈高并发系统的限流》&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;计数器：通过滑动窗口计数器，控制单位时间内的请求次数，简单粗暴。&lt;/li&gt;
&lt;li&gt;漏桶算法：固定容量的漏桶，漏桶满了就丢弃请求，比较常用。&lt;/li&gt;
&lt;li&gt;令牌桶算法：固定容量的令牌桶，按照一定速率添加令牌，处理请求前需要拿到令牌，拿不到令牌则丢弃请求，或进入丢队列，可以通过控制添加令牌的速率，来控制整体速度。Guava 中的 RateLimiter 是令牌桶的实现。&lt;/li&gt;
&lt;li&gt;Nginx 限流：通过 &lt;code&gt;limit_req&lt;/code&gt; 等模块限制并发连接数。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;应用层容灾&#34;&gt;应用层容灾&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://segmentfault.com/a/1190000005988895&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《防雪崩利器：熔断器 Hystrix 的原理与使用》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;雪崩效应原因：硬件故障、硬件故障、程序Bug、重试加大流量、用户大量请求。&lt;/li&gt;
&lt;li&gt;雪崩的对策：限流、改进缓存模式(缓存预加载、同步调用改异步)、自动扩容、降级。&lt;/li&gt;
&lt;li&gt;Hystrix设计原则：

&lt;ul&gt;
&lt;li&gt;资源隔离：Hystrix通过将每个依赖服务分配独立的线程池进行资源隔离, 从而避免服务雪崩。&lt;/li&gt;
&lt;li&gt;熔断开关：服务的健康状况 = 请求失败数 / 请求总数，通过阈值设定和滑动窗口控制开关。&lt;/li&gt;
&lt;li&gt;命令模式：通过继承 HystrixCommand 来包装服务调用逻辑。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/zeb_perfect/article/details/54135506&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《缓存穿透，缓存击穿，缓存雪崩解决方案分析》&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/zeb_perfect/article/details/54135506&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《缓存击穿、失效以及热点key问题》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;主要策略：失效瞬间：单机使用锁；使用分布式锁；不过期；&lt;/li&gt;
&lt;li&gt;热点数据：热点数据单独存储；使用本地缓存；分成多个子key；&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;跨机房容灾&#34;&gt;跨机房容灾&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://dc.idcquan.com/ywgl/71559.shtml&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《“异地多活”多机房部署经验谈》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;通过自研中间件进行数据同步。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/jeffreynicole/article/details/48135093&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《异地多活（异地双活）实践经验》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;注意延迟问题，多次跨机房调用会将延时放大数倍。&lt;/li&gt;
&lt;li&gt;建房间专线很大概率会出现问题，做好运维和程序层面的容错。&lt;/li&gt;
&lt;li&gt;不能依赖于程序端数据双写，要有自动同步方案。&lt;/li&gt;
&lt;li&gt;数据永不在高延迟和较差网络质量下，考虑同步质量问题。&lt;/li&gt;
&lt;li&gt;核心业务和次要业务分而治之，甚至只考虑核心业务。&lt;/li&gt;
&lt;li&gt;异地多活监控部署、测试也要跟上。&lt;/li&gt;
&lt;li&gt;业务允许的情况下考虑用户分区，尤其是游戏、邮箱业务。&lt;/li&gt;
&lt;li&gt;控制跨机房消息体大小，越小越好。&lt;/li&gt;
&lt;li&gt;考虑使用docker容器虚拟化技术，提高动态调度能力。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/yoara/article/details/38013751&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;容灾技术及建设经验介绍&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;容灾演练流程&#34;&gt;容灾演练流程&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;amp;mid=2650996320&amp;amp;idx=1&amp;amp;sn=0ed3be190bbee4a9277886ef88cbb2e5&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《依赖治理、灰度发布、故障演练，阿里电商故障演练系统的设计与实战经验》&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;常见故障画像&lt;/li&gt;
&lt;li&gt;案例：预案有效性、预案有效性、故障复现、架构容灾测试、参数调优、参数调优、故障突袭、联合演练。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;平滑启动&#34;&gt;平滑启动&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;平滑重启应用思路
1.端流量（如vip层）、2. flush 数据(如果有)、3, 重启应用&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/u011001084/article/details/73480432&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《JVM安全退出（如何优雅的关闭java服务）》&lt;/a&gt;
推荐推出方式：System.exit，Kill SIGTERM；不推荐 kill-9；用 Runtime.addShutdownHook 注册钩子。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://ju.outofmemory.cn/entry/337235&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《常见Java应用如何优雅关闭》&lt;/a&gt;
Java、Spring、Dubbo 优雅关闭方式。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;数据库扩展&#34;&gt;数据库扩展&lt;/h2&gt;

&lt;h3 id=&#34;读写分离模式&#34;&gt;读写分离模式&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/houdj/p/6563771.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《Mysql主从方案的实现》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/edisonchou/p/4133148.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《搭建MySQL主从复制经典架构》&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/nimasike/article/details/48048341&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《Haproxy+多台MySQL从服务器(Slave) 实现负载均衡》&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/zhangsubai/p/6801764.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《DRBD+Heartbeat+Mysql高可用读写分离架构》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DRDB 进行磁盘复制，避免单点问题。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://coderxing.gitbooks.io/architecture-evolution/di-san-pian-ff1a-bu-luo/62-ke-kuo-zhan-de-shu-ju-ku-jia-gou/621-gao-ke-yong-mysql-de-ji-zhong-fang-an/6214-mysql-cluster-fang-an.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《MySQL Cluster 方式》&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;分片模式&#34;&gt;分片模式&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.jianshu.com/p/32b3e91aa22c&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《分库分表需要考虑的问题及方案》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;中间件： 轻量级：sharding-jdbc、TSharding；重量级：Atlas、MyCAT、Vitess等。&lt;/li&gt;
&lt;li&gt;问题：事务、Join、迁移、扩容、ID、分页等。&lt;/li&gt;
&lt;li&gt;事务补偿：对数据进行对帐检查;基于日志进行比对;定期同标准数据来源进行同步等。&lt;/li&gt;
&lt;li&gt;分库策略：数值范围；取模；日期等。&lt;/li&gt;
&lt;li&gt;分库数量：通常 MySQL 单库 5千万条、Oracle 单库一亿条需要分库。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.2cto.com/database/201503/380348.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《MySql分表和表分区详解》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;分区：是MySQL内部机制，对客户端透明，数据存储在不同文件中，表面上看是同一个表。&lt;/li&gt;
&lt;li&gt;分表：物理上创建不同的表、客户端需要管理分表路由。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;服务治理&#34;&gt;服务治理&lt;/h2&gt;

&lt;h3 id=&#34;服务注册与发现&#34;&gt;服务注册与发现&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/jiaolongdy/article/details/51188798&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《永不失联！如何实现微服务架构中的服务发现？》&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;客户端服务发现模式：客户端直接查询注册表，同时自己负责负载均衡。Eureka 采用这种方式。&lt;/li&gt;
&lt;li&gt;服务器端服务发现模式：客户端通过负载均衡查询服务实例。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/u010963948/article/details/71730165&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《SpringCloud服务注册中心比较:Consul vs Zookeeper vs Etcd vs Eureka》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CAP支持：Consul（CA）、zookeeper（cp）、etcd（cp） 、euerka（ap）&lt;/li&gt;
&lt;li&gt;作者认为目前 Consul 对 Spring cloud 的支持比较好。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://mobile.51cto.com/news-502394.htm&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《基于Zookeeper的服务注册与发现》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;优点：API简单、Pinterest，Airbnb 在用、多语言、通过watcher机制来实现配置PUSH，能快速响应配置变化。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;服务路由控制&#34;&gt;服务路由控制&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/xundh/article/details/59492750&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《分布式服务框架学习笔记4 服务路由》&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;原则：透明化路由&lt;/li&gt;
&lt;li&gt;负载均衡策略：随机、轮询、服务调用延迟、一致性哈希、粘滞连接&lt;/li&gt;
&lt;li&gt;本地路由优先策略：injvm(优先调用jvm内部的服务)，innative(优先使用相同物理机的服务),原则上找距离最近的服务。&lt;/li&gt;
&lt;li&gt;配置方式：统一注册表；本地配置；动态下发。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;分布式一致&#34;&gt;分布式一致&lt;/h2&gt;

&lt;h3 id=&#34;cap-与-base-理论&#34;&gt;CAP 与 BASE 理论&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cnblogs.com/szlbm/p/5588543.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《从分布式一致性谈到CAP理论、BASE理论》&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;一致性分类：强一致(立即一致)；弱一致(可在单位时间内实现一致，比如秒级)；最终一致(弱一致的一种，一定时间内最终一致)&lt;/li&gt;
&lt;li&gt;CAP：一致性、可用性、分区容错性(网络故障引起)&lt;/li&gt;
&lt;li&gt;BASE：Basically Available（基本可用）、Soft state（软状态）和Eventually consistent（最终一致性）&lt;/li&gt;
&lt;li&gt;BASE理论的核心思想是：即使无法做到强一致性，但每个应用都可以根据自身业务特点，采用适当的方式来使系统达到最终一致性。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;分布式锁&#34;&gt;分布式锁&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.hollischuang.com/archives/1716&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《分布式锁的几种实现方式》&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;基于数据库的分布式锁：优点：操作简单、容易理解。缺点：存在单点问题、数据库性能够开销较大、不可重入；&lt;/li&gt;
&lt;li&gt;基于缓存的分布式锁：优点：非阻塞、性能好。缺点：操作不好容易造成锁无法释放的情况。&lt;/li&gt;
&lt;li&gt;Zookeeper 分布式锁：通过有序临时节点实现锁机制，自己对应的节点需要最小，则被认为是获得了锁。优点：集群可以透明解决单点问题，避免锁不被释放问题，同时锁可以重入。缺点：性能不如缓存方式，吞吐量会随着zk集群规模变大而下降。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.tuicool.com/articles/VZJr6fY&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《基于Zookeeper的分布式锁》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;清楚的原理描述 + Java 代码示例。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/0201zcr/p/5942748.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《jedisLock—redis分布式锁实现》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;基于 setnx(set if ont exists)，有则返回false，否则返回true。并支持过期时间。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/albertfly/article/details/77412333&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《Memcached 和 Redis 分布式锁方案》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;利用 memcached 的 add（有别于set）操作，当key存在时，返回false。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;分布式一致性算法&#34;&gt;分布式一致性算法&lt;/h3&gt;

&lt;h4 id=&#34;paxos&#34;&gt;PAXOS&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/linbingdong/p/6253479.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《分布式系列文章——Paxos算法原理与推导》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/u010039929/article/details/70171672&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《Paxos&amp;ndash;&amp;gt;Fast Paxos&amp;ndash;&amp;gt;Zookeeper分析》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/leesf456/p/6012777.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《【分布式】Zookeeper与Paxos》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;zab&#34;&gt;Zab&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jianshu.com/p/fb527a64deee&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《Zab：Zookeeper 中的分布式一致性协议介绍》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;raft&#34;&gt;Raft&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cnblogs.com/mindwind/p/5231986.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《Raft 为什么是更易理解的分布式一致性算法》&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;三种角色：Leader（领袖）、Follower（群众）、Candidate（候选人）&lt;/li&gt;
&lt;li&gt;通过随机等待的方式发出投票，得票多的获胜。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;gossip&#34;&gt;Gossip&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.51cto.com/tianya23/530743&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《Gossip算法》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;两阶段提交-多阶段提交&#34;&gt;两阶段提交、多阶段提交&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.jobbole.com/95632/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《关于分布式事务、两阶段提交协议、三阶提交协议》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;幂等&#34;&gt;幂等&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/wxgblogs/p/6639272.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《分布式系统&amp;mdash;幂等性设计》&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;幂等特性的作用：该资源具备幂等性，请求方无需担心重复调用会产生错误。&lt;/li&gt;
&lt;li&gt;常见保证幂等的手段：MVCC（类似于乐观锁）、去重表(唯一索引)、悲观锁、一次性token、序列号方式。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;分布式一致方案&#34;&gt;分布式一致方案&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.infoq.com/cn/articles/solution-of-distributed-system-transaction-consistency&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《分布式系统事务一致性解决方案》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://weibo.com/ttarticle/p/show?id=2309403965965003062676&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《保证分布式系统数据一致性的6种方案》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;分布式-leader-节点选举&#34;&gt;分布式 Leader 节点选举&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/johnson_moon/article/details/78809995&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《利用zookeeper实现分布式leader节点选举》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;tcc-try-confirm-cancel-柔性事务&#34;&gt;TCC(Try/Confirm/Cancel) 柔性事务&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jianshu.com/p/ab1a1c6b08a1&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《传统事务与柔性事务》&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;基于BASE理论：基本可用、柔性状态、最终一致。&lt;/li&gt;
&lt;li&gt;解决方案：记录日志+补偿（正向补充或者回滚）、消息重试(要求程序要幂等)；“无锁设计”、采用乐观锁机制。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;分布式文件系统&#34;&gt;分布式文件系统&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/27666295&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;说说分布式文件存储系统-基本架构&lt;/a&gt; ？&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/gatieme/article/details/44982961&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《各种分布式文件系统的比较》&lt;/a&gt; ？

&lt;ul&gt;
&lt;li&gt;HDFS：大批量数据读写，用于高吞吐量的场景，不适合小文件。&lt;/li&gt;
&lt;li&gt;FastDFS：轻量级、适合小文件。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;唯一id-生成&#34;&gt;唯一ID 生成&lt;/h2&gt;

&lt;h3 id=&#34;全局唯一id&#34;&gt;全局唯一ID&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/baiwa/p/5318432.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《高并发分布式系统中生成全局唯一Id汇总》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Twitter 方案（Snowflake 算法）：41位时间戳+10位机器标识（比如IP，服务器名称等）+12位序列号(本地计数器)&lt;/li&gt;
&lt;li&gt;Flicker 方案：MySQL自增ID + &amp;ldquo;REPLACE INTO XXX:SELECT LAST_INSERT_ID();&amp;rdquo;&lt;/li&gt;
&lt;li&gt;UUID：缺点，无序，字符串过长，占用空间，影响检索性能。&lt;/li&gt;
&lt;li&gt;MongoDB 方案：利用 ObjectId。缺点：不能自增。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/hdu09075340/article/details/79103851&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《TDDL 在分布式下的SEQUENCE原理》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;在数据库中创建 sequence 表，用于记录，当前已被占用的id最大值。&lt;/li&gt;
&lt;li&gt;每台客户端主机取一个id区间（比如 1000~2000）缓存在本地，并更新 sequence 表中的id最大值记录。&lt;/li&gt;
&lt;li&gt;客户端主机之间取不同的id区间，用完再取，使用乐观锁机制控制并发。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;一致性hash算法&#34;&gt;一致性Hash算法&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://coderxing.gitbooks.io/architecture-evolution/di-san-pian-ff1a-bu-luo/631-yi-zhi-xing-ha-xi.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《一致性哈希算法》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;设计思想-开发模式&#34;&gt;设计思想 &amp;amp; 开发模式&lt;/h1&gt;

&lt;h2 id=&#34;ddd-domain-driven-design-领域驱动设计&#34;&gt;DDD(Domain-driven Design - 领域驱动设计)&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/netfocus/p/5548025.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《浅谈我对DDD领域驱动设计的理解》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;概念：DDD 主要对传统软件开发流程(分析-设计-编码)中各阶段的割裂问题而提出，避免由于一开始分析不明或在软件开发过程中的信息流转不一致而造成软件无法交付（和需求方设想不一致）的问题。DDD 强调一切以领域（Domain）为中心，强调领域专家（Domain Expert）的作用，强调先定义好领域模型之后在进行开发，并且领域模型可以指导开发（所谓的驱动）。&lt;/li&gt;
&lt;li&gt;过程：理解领域、拆分领域、细化领域，模型的准确性取决于模型的理解深度。&lt;/li&gt;
&lt;li&gt;设计：DDD 中提出了建模工具，比如聚合、实体、值对象、工厂、仓储、领域服务、领域事件来帮助领域建模。
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/butterfly100/p/7827870.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《领域驱动设计的基础知识总结》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;领域（Doamin）本质上就是问题域，比如一个电商系统，一个论坛系统等。&lt;/li&gt;
&lt;li&gt;界限上下文（Bounded Context）：阐述子域之间的关系，可以简单理解成一个子系统或组件模块。&lt;/li&gt;
&lt;li&gt;领域模型（Domain Model）：DDD的核心是建立（用通用描述语言、工具—领域通用语言）正确的领域模型；反应业务需求的本质，包括实体和过程；其贯穿软件分析、设计、开发 的整个过程；常用表达领域模型的方式：图、代码或文字；&lt;/li&gt;
&lt;li&gt;领域通用语言：领域专家、开发设计人员都能立即的语言或工具。&lt;/li&gt;
&lt;li&gt;经典分层架构：用户界面/展示层、应用层、领域层、基础设施层，是四层架构模式。&lt;/li&gt;
&lt;li&gt;使用的模式：&lt;/li&gt;
&lt;li&gt;关联尽量少，尽量单项，尽量降低整体复杂度。&lt;/li&gt;
&lt;li&gt;实体（Entity）：领域中的唯一标示，一个实体的属性尽量少，少则清晰。&lt;/li&gt;
&lt;li&gt;值对象（Value Object）：没有唯一标识，且属性值不可变，小二简单的对象，比如Date。&lt;/li&gt;
&lt;li&gt;领域服务（Domain Service）： 协调多个领域对象，只有方法没有状态(不存数据)；可以分为应用层服务，领域层服务、基础层服务。&lt;/li&gt;
&lt;li&gt;聚合及聚合根（Aggregate，Aggregate Root）：聚合定义了一组具有内聚关系的相关对象的集合；聚合根是对聚合引用的唯一元素；当修改一个聚合时，必须在事务级别；大部分领域模型中，有70%的聚合通常只有一个实体，30%只有2~3个实体；如果一个聚合只有一个实体，那么这个实体就是聚合根；如果有多个实体，那么我们可以思考聚合内哪个对象有独立存在的意义并且可以和外部直接进行交互；&lt;/li&gt;
&lt;li&gt;工厂（Factory）：类似于设计模式中的工厂模式。&lt;/li&gt;
&lt;li&gt;仓储（Repository）：持久化到DB，管理对象，且只对聚合设计仓储。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.cnblogs.com/Leo_wl/p/3866629.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《领域驱动设计(DDD)实现之路》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;聚合：比如一辆汽车（Car）包含了引擎（Engine）、车轮（Wheel）和油箱（Tank）等组件，缺一不可。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.hollischuang.com/archives/553&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《领域驱动设计系列（2）浅析VO、DTO、DO、PO的概念、区别和用处》&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;命令查询职责分离-cqrs&#34;&gt;命令查询职责分离(CQRS)&lt;/h3&gt;

&lt;p&gt;CQRS — Command Query Responsibility Seperation&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/cnblogsfans/p/4551990.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《领域驱动设计系列 (六)：CQRS》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;核心思想：读写分离（查询和更新在不同的方法中），不同的流程只是不同的设计方式，CQ代码分离，分布式环境中会有明显体现（有冗余数据的情况下），目的是为了高性能。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.techweb.com.cn/network/system/2017-07-07/2553563.shtml&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《DDD CQRS架构和传统架构的优缺点比较》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;最终一致的设计理念；依赖于高可用消息中间件。
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.cnblogs.com/netfocus/p/4055346.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《CQRS架构简介》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;一个实现 CQRS 的抽象案例。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.uml.org.cn/zjjs/201609221.asp&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《深度长文：我对CQRS/EventSourcing架构的思考》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CQRS 模式分析 + 12306 抢票案例&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;贫血-充血模型&#34;&gt;贫血，充血模型&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://kb.cnblogs.com/page/520743/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《贫血，充血模型的解释以及一些经验》&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;失血模型：老子和儿子分别定义，相互不知道，二者实体定义中完全没有业务逻辑，通过外部Service进行关联。&lt;/li&gt;
&lt;li&gt;贫血模型：老子知道儿子，儿子也知道老子；部分业务逻辑放到实体中；优点：各层单项依赖，结构清楚，易于维护；缺点：不符合OO思想，相比于充血模式，Service层较为厚重；&lt;/li&gt;
&lt;li&gt;充血模型：和贫血模型类似，区别在于如何划分业务逻辑。优点：Service层比较薄，只充当Facade的角色，不和DAO打交道、复合OO思想；缺点：非单项依赖，DO和DAO之间双向依赖、和Service层的逻辑划分容易造成混乱。&lt;/li&gt;
&lt;li&gt;肿胀模式：是一种极端情况，取消Service层、全部业务逻辑放在DO中；优点：符合OO思想、简化了分层；缺点：暴露信息过多、很多非DO逻辑也会强行并入DO。这种模式应该避免。&lt;/li&gt;
&lt;li&gt;作者主张使用贫血模式。
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;actor-模式&#34;&gt;Actor 模式&lt;/h2&gt;

&lt;p&gt;TODO&lt;/p&gt;

&lt;h2 id=&#34;响应式编程&#34;&gt;响应式编程&lt;/h2&gt;

&lt;h3 id=&#34;reactor&#34;&gt;Reactor&lt;/h3&gt;

&lt;p&gt;TODO&lt;/p&gt;

&lt;h3 id=&#34;rxjava&#34;&gt;RxJava&lt;/h3&gt;

&lt;p&gt;TODO&lt;/p&gt;

&lt;h3 id=&#34;vert-x&#34;&gt;Vert.x&lt;/h3&gt;

&lt;p&gt;TODO&lt;/p&gt;

&lt;h2 id=&#34;dodaf2-0&#34;&gt;DODAF2.0&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.360doc.com/content/16/0627/19/33945750_571201779.shtml&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《DODAF2.0方法论》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.51cto.com/xiaoyong/1553164&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《DODAF2.0之能力视角如何落地》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;serverless&#34;&gt;Serverless&lt;/h2&gt;

&lt;p&gt;无需过多关系服务器的服务架构理念。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.jdon.com/soa/serverless.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《什么是Serverless无服务器架构？》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Serverless 不代表出去服务器，而是去除对服务器运行状态的关心。&lt;/li&gt;
&lt;li&gt;Serverless 代表一思维方式的转变，从“构建一套服务在一台服务器上，对对个事件进行响应转变为构建一个为服务器，来响应一个事件”。&lt;/li&gt;
&lt;li&gt;Serverless 不代表某个具体的框架。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.infoq.com/cn/news/2017/10/how-to-understand-serverless&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《如何理解Serverless？》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;依赖于 Baas （(Mobile) Backend as a Service） 和 Faas （Functions as a service）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;service-mesh&#34;&gt;Service Mesh&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://time.geekbang.org/article/2355&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《什么是Service Mesh？》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jianshu.com/p/e23e3e74538e&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《初识 Service Mesh》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;项目管理&#34;&gt;项目管理&lt;/h1&gt;

&lt;h2 id=&#34;架构评审&#34;&gt;架构评审&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://developer.51cto.com/art/201506/478486.htm&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《架构设计之如何评审架构设计说明书》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/wireless_com/article/details/45935591&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《人人都是架构师：非功能性需求》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;重构&#34;&gt;重构&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.infoq.com/cn/articles/architect-12-rules-complete/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《架构之重构的12条军规》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;代码规范&#34;&gt;代码规范&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/alibaba/p3c&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《阿里巴巴Java开发手册》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;代码-review&#34;&gt;代码 Review&lt;/h2&gt;

&lt;p&gt;制度还是制度!
另外，每个公司需要根据自己的需求和目标制定自己的 check list&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.sohu.com/a/229745352_181657&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《为什么你做不好 Code Review？》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;代码 review 做的好，在于制度建设。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/uxyheaven/article/details/49773619&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《从零开始Code Review》&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/zuoping/p/5477047.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《Code Review Checklist》&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://dzone.com/articles/java-code-review-checklist&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《Java Code Review Checklist》&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/legend0011/article/details/45585575&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《如何用 gitlab 做 code review》&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;rup&#34;&gt;RUP&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/apanious/article/details/51011946&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《运用RUP 4+1视图方法进行软件架构设计》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;看板管理&#34;&gt;看板管理&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/tkchen/article/details/51637643&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《说说看板在项目中的应用》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;scrum&#34;&gt;SCRUM&lt;/h2&gt;

&lt;p&gt;SCRUM - 争球&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;3个角色:Product Owner(PO) 产品负责人;Scrum Master（SM），推动Scrum执行;Team 开发团队。&lt;/li&gt;
&lt;li&gt;3个工件：Product Backlog 产品TODOLIST，含优先级;Sprint Backlog 功能开发 TODO LIST；燃尽图；&lt;/li&gt;

&lt;li&gt;&lt;p&gt;五个价值观：专注、勇气、公开、承诺、尊重。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/inny100_100/article/details/54633757&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《敏捷项目管理流程-Scrum框架最全总结！》&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/superkunkun/article/details/52951142&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《敏捷其实很简单3&amp;mdash;敏捷方法之scrum》&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;敏捷开发&#34;&gt;敏捷开发&lt;/h2&gt;

&lt;p&gt;TODO&lt;/p&gt;

&lt;h2 id=&#34;极限编程-xp&#34;&gt;极限编程（XP）&lt;/h2&gt;

&lt;p&gt;XP - eXtreme Programming&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.woshipm.com/pmd/406917.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《主流敏捷开发方法：极限编程XP》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;是一种指导开发人员的方法论。&lt;/li&gt;

&lt;li&gt;&lt;p&gt;4大价值：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;沟通：鼓励口头沟通，提高效率。&lt;/li&gt;
&lt;li&gt;简单：够用就好。&lt;/li&gt;
&lt;li&gt;反馈：及时反馈、通知相关人。&lt;/li&gt;
&lt;li&gt;勇气：提倡拥抱变化，敢于重构。
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;5个原则：快速反馈、简单性假设、逐步修改、提倡更改（小步快跑）、优质工作（保证质量的前提下保证小步快跑）。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;5个工作：阶段性冲刺；冲刺计划会议；每日站立会议；冲刺后review；回顾会议。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;结对编程&#34;&gt;结对编程&lt;/h2&gt;

&lt;p&gt;边写码，边review。能够增强代码质量、减少bug。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.baike.com/wiki/%E7%BB%93%E5%AF%B9%E7%BC%96%E7%A8%8B&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《结对编程》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;pdca-循环质量管理&#34;&gt;PDCA 循环质量管理&lt;/h2&gt;

&lt;p&gt;P——PLAN 策划，D——DO 实施，C——CHECK 检查，A——ACT 改进&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.baike.com/wiki/PDCA&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《PDCA》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;fmea管理模式&#34;&gt;FMEA管理模式&lt;/h2&gt;

&lt;p&gt;TODO&lt;/p&gt;

&lt;h1 id=&#34;通用业务术语&#34;&gt;通用业务术语&lt;/h1&gt;

&lt;p&gt;TODO&lt;/p&gt;

&lt;h1 id=&#34;技术趋势&#34;&gt;技术趋势&lt;/h1&gt;

&lt;p&gt;TODO&lt;/p&gt;

&lt;h1 id=&#34;政策-法规&#34;&gt;政策、法规&lt;/h1&gt;

&lt;h2 id=&#34;法律&#34;&gt;法律&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://baike.baidu.com/item/%E4%B8%AD%E5%8D%8E%E4%BA%BA%E6%B0%91%E5%85%B1%E5%92%8C%E5%9B%BD%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%B3%95/16843044&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《中华人民共和国网络安全法》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;2016年11月7日发布，自2017年6月1日起施行&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://baike.baidu.com/item/个人信息保护法/8343360&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《个人信息保护法》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;个人信息保护法是一部保护个人信息的法律条款，现尚在制订中，2019全国两会信息安全相关提案中，有政协委员呼吁关注大数据时代隐私保护，加速立法。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://baike.baidu.com/item/最高人民法院、最高人民检察院关于办理侵犯公民个人信息刑事案件适用法律若干问题的解释/20497481&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《最高人民法院、最高人民检察院关于办理侵犯公民个人信息刑事案件适用法律若干问题的解释》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;《解释》共十三条，自2017年6月1日起施行
&amp;gt; * 1、对于行踪轨迹信息、通信内容、征信信息、财产信息，非法获取、出售或者提供50条以上即算“情节严重”；
&amp;gt; * 2、对于住宿信息、通信记录、健康生理信息、交易信息等其他可能影响人身、财产安全的公民个人信息，标准则是 500条以上；
&amp;gt; * 3、对于其他公民个人信息，标准为 5000条以上。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://baike.baidu.com/item/中华人民共和国电子商务法/16467544&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《中华人民共和国电子商务法》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;2018年8月31日，十三届全国人大常委会第五次会议表决通过《电子商务法》，自2019年1月1日起施行&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://v.youku.com/v_show/id_XNDAzNjAyNDM0MA==.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;解读电子商务法（一）什么是电商&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://v.youku.com/v_show/id_XNDA1OTc0OTQ5Mg==.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;解读电子商务法（二）电商经营者&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://v.youku.com/v_show/id_XNDA4NzIyNjI4MA==.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;解读电子商务法（三）电商行为规范&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://v.qq.com/x/page/e08443fc1cr.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;解读电子商务法（四）电商的法律关系&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://v.youku.com/v_show/id_XNDA4MTQ2Nzk4NA==.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;解读电子商务法（外传）电商挣钱的秘密&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://v.qq.com/x/page/j0844twjwr5.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;解读电子商务法（外传）电商模式&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/a331685690/article/details/79917772&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;程序员需要知道的法律常识&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://time.geekbang.org/column/132&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;白话法律42讲-为程序员打造的专属法律武器&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;严格遵守刑法253法条&#34;&gt;严格遵守刑法253法条&lt;/h3&gt;

&lt;p&gt;我国刑法第253条之一规定：&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;国家机关或者金融、电信、交通、教育、医疗等单位的工作人员，违反国家规定，将本单位在履行职责或者提供服务过程中获得的公民个人信息，出售或者非法提供给他人，情节严重的，处3年以下有期徒刑或者拘役，并处或者单处罚金。&lt;/li&gt;
&lt;li&gt;窃取或者以其他方法非法获取上述信息，情节严重的，依照前款的规定处罚。&lt;/li&gt;
&lt;li&gt;单位犯前两款罪的，对单位判处罚金，并对其直接负责的主管人员和其他直接责任人员，依照各该款的规定处罚。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;最高人民法院、最高人民检察院关于执行《中华人民共和国刑法》确定罪名的补充规定（四）规定：触犯刑法第253条之一第1款之规定，构成“出售、非法提供公民个人信息罪”；触犯刑法第253条之一第2款之规定，构成“非法获取公民个人信息罪”&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://baike.baidu.com/item/%E9%9D%9E%E6%B3%95%E8%8E%B7%E5%8F%96%E5%85%AC%E6%B0%91%E4%B8%AA%E4%BA%BA%E4%BF%A1%E6%81%AF%E7%BD%AA&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《非法获取公民个人信息罪》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;避风港原则&#34;&gt;避风港原则&lt;/h3&gt;

&lt;p&gt;“避风港”原则是指在发生著作权侵权案件时，当ISP（网络服务提供商）只提供空间服务，并不制作网页内容，如果ISP被告知侵权，则有删除的义务，否则就被视为侵权。如果侵权内容既不在ISP的服务器上存储，又没有被告知哪些内容应该删除，则ISP不承担侵权责任。 后来避风港原则也被应用在搜索引擎、网络存储、在线图书馆等方面。
* &lt;a href=&#34;https://baike.baidu.com/item/%E9%81%BF%E9%A3%8E%E6%B8%AF%E5%8E%9F%E5%88%99/588459?fr=aladdin&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《避风港原则》&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;架构师素质&#34;&gt;架构师素质&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://hellojava.info/?p=430&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《架构师画像》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;业务理解和抽象能力&lt;/li&gt;
&lt;li&gt;NB的代码能力&lt;/li&gt;
&lt;li&gt;全面：1. 在面对业务问题上，架构师脑海里是否会浮现出多种技术方案；2. 在做系统设计时是否考虑到了足够多的方方面面；3. 在做系统设计时是否考虑到了足够多的方方面面；&lt;/li&gt;
&lt;li&gt;全局：是否考虑到了对上下游的系统的影响。&lt;/li&gt;
&lt;li&gt;权衡：权衡投入产出比；优先级和节奏控制；&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.infoq.com/cn/articles/architecture-optimization-and-design-the-architect-must-know&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《关于架构优化和设计，架构师必须知道的事情》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;要去考虑的细节：模块化、轻耦合、无共享架构；减少各个组件之前的依赖、注意服务之间依赖所有造成的链式失败及影响等。&lt;/li&gt;
&lt;li&gt;基础设施、配置、测试、开发、运维综合考虑。&lt;/li&gt;
&lt;li&gt;考虑人、团队、和组织的影响。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.zhihu.com/question/19841397&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《如何才能真正的提高自己，成为一名出色的架构师？》&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/sanbingyutuoniao123/article/details/54144129&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《架构师的必备素质和成长途径》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;素质：业务理解、技术广度、技术深度、丰富经验、沟通能力、动手能力、美学素养。&lt;/li&gt;
&lt;li&gt;成长路径：2年积累知识、4年积累技能和组内影响力、7年积累部门内影响力、7年以上积累跨部门影响力。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://blog.51cto.com/frankfan/1248401&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《架构设计师—你在哪层楼？》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;第一层的架构师看到的只是产品本身&lt;/li&gt;
&lt;li&gt;第二层的架构师不仅看到自己的产品，还看到了整体的方案&lt;/li&gt;
&lt;li&gt;第三层的架构师看到的是商业价值&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;团队管理&#34;&gt;团队管理&lt;/h1&gt;

&lt;p&gt;TODO&lt;/p&gt;

&lt;h2 id=&#34;招聘&#34;&gt;招聘&lt;/h2&gt;

&lt;h1 id=&#34;资讯&#34;&gt;资讯&lt;/h1&gt;

&lt;h2 id=&#34;行业资讯&#34;&gt;行业资讯&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://36kr.com/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;36kr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.techweb.com.cn/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Techweb&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;公众号列表&#34;&gt;公众号列表&lt;/h2&gt;

&lt;p&gt;TODO&lt;/p&gt;

&lt;h2 id=&#34;博客&#34;&gt;博客&lt;/h2&gt;

&lt;h3 id=&#34;团队博客&#34;&gt;团队博客&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://jm.taobao.org/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;阿里中间件博客&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tech.meituan.com&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;美团点评技术团队博客&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;个人博客&#34;&gt;个人博客&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ruanyifeng.com/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;阮一峰的网络日志&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://coolshell.cn/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;酷壳 - COOLSHELL-陈皓&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://hellojava.info/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;hellojava-阿里毕玄&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cmsblogs.com/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Cm&amp;rsquo;s Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.didispace.com/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;程序猿DD-翟永超-《Spring Cloud微服务实战》作者&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;综合门户-社区&#34;&gt;综合门户、社区&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;国内：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://csdn.net&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;CSDN&lt;/a&gt;
 老牌技术社区、不必解释。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.51cto.com/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;51cto.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.iteye.com/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;ITeye&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;偏 Java 方向&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;博客园&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.chinaunix.net/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;ChinaUnix&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;偏 Linux 方向&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.oschina.net/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;开源中国社区&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.infoq.cn/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;InfoQ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-open.com/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;深度开源&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.jobbole.com/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;伯乐在线&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;涵盖 IT职场、Web前端、后端、移动端、数据库等方面内容，偏技术端。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.itpub.net/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;ITPUB&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://cloud.tencent.com/developer/column&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;腾讯云— 云+社区&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://yq.aliyun.com/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;阿里云— 云栖社区&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.ibm.com/developerworks/cn/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;IBM DeveloperWorks&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://toutiao.io/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;开发者头条&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.linkedkeeper.com&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;LinkedKeeper&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;国外：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://dzone.com&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;DZone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.reddit.com&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Reddit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;问答-讨论类社区&#34;&gt;问答、讨论类社区&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://segmentfault.com&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;segmentfault&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;问答+专栏&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.zhihu.com/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;知乎&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;stackoverflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;行业数据分析&#34;&gt;行业数据分析&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://report.iresearch.cn/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;艾瑞网&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.questmobile.com.cn&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;QUEST MOBILE&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://data.stats.gov.cn/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;国家数据&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.talkingdata.com/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;TalkingData&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;专项网站&#34;&gt;专项网站&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;测试:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ltesting.net/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;领测国际&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.testwo.com/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;测试窝&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://testerhome.com&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;TesterHome&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;运维:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.yunweipai.com/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;运维派&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.abcdocker.com/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Abcdocker&lt;/a&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Java:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.importnew.com/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;ImportNew&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;专注于 Java 技术分享&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://howtodoinjava.com/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;HowToDoInJava&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;英文博客
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;安全&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.2cto.com/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;红黑联盟&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.freebuf.com/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;FreeBuf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;大数据&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.thebigdata.cn/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;中国大数据&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;其他专题网站：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.infoq.com/cn/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;InfoQ&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;偏重于基础架构、运维方向&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.dockerinfo.net/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;DockerInfo&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;专注于 Docker 应用及咨询、教程的网站&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linuxidc.com/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Linux公社&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Linux 主题社区&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;其他类&#34;&gt;其他类&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/TeamStuQ/skill-map&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;程序员技能图谱&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;推荐参考书&#34;&gt;推荐参考书&lt;/h2&gt;

&lt;h3 id=&#34;在线电子书&#34;&gt;在线电子书&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/forezp/SpringCloudLearning&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《深入理解Spring Cloud与微服务构建》&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://techforum-img.cn-hangzhou.oss-pub.aliyun-inc.com/1523849261680/AliTech101_RD.pdf&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《阿里技术参考图册-研发篇》&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://techforum-img.cn-hangzhou.oss-pub.aliyun-inc.com/1523848064814/AliTech101_Algorithms.pdf&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《阿里技术参考图册-算法篇》&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://dpurl.cn/n/1lqcX&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《2018美团点评技术年货（合辑）》70M&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.infoq.com/cn/architect/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;InfoQ《架构师》月刊&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.w3cschool.cn/architectroad/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《架构师之路》&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;纸质书&#34;&gt;纸质书&lt;/h3&gt;

&lt;p&gt;&lt;b style=&#34;color:red&#34;&gt;更多架构方面书籍参考:&lt;/b&gt; &lt;a href=&#34;https://github.com/sorenduan/awesome-java-books/blob/master/README.md#%E6%9E%B6%E6%9E%84&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;awesome-java-books&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;开发方面&#34;&gt;开发方面&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;《阿里巴巴Java开发手册》&lt;a href=&#34;https://www.coderxing.com/r.php?r=https://union-click.jd.com/jdc?d=BfL5CR&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;详情&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;架构方面&#34;&gt;架构方面&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;《软件架构师的12项修炼：技术技能篇》&lt;a href=&#34;https://www.coderxing.com/r.php?r=https://union-click.jd.com/jdc?d=rTlo0m&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;详情&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;《架构之美》&lt;a href=&#34;https://www.coderxing.com/r.php?r=https://union-click.jd.com/jdc?d=1KECBZ&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;详情&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;《分布式服务架构》&lt;a href=&#34;https://www.coderxing.com/r.php?r=https://union-click.jd.com/jdc?d=hkzqtK&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;详情&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;《聊聊架构》 &lt;a href=&#34;https://www.coderxing.com/r.php?r=https://union-click.jd.com/jdc?d=A8Nd6Z&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;详情&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;《云原生应用架构实践》&lt;a href=&#34;https://www.coderxing.com/r.php?r=https://union-click.jd.com/jdc?d=D4WCpd&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;详情&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;《亿级流量网站架构核心技术》&lt;a href=&#34;https://www.coderxing.com/r.php?r=https://union-click.jd.com/jdc?d=Rdmd21&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;详情&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;《淘宝技术这十年》&lt;a href=&#34;https://www.coderxing.com/r.php?r=https://union-click.jd.com/jdc?d=CoUdGG&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;详情&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;《企业IT架构转型之道-中台战略思想与架构实战》 &lt;a href=&#34;https://www.coderxing.com/r.php?r=https://union-click.jd.com/jdc?d=BxS6eI&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;详情&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;《高可用架构（第1卷）》&lt;a href=&#34;https://www.coderxing.com/r.php?r=https://union-click.jd.com/jdc?d=BcjUwS&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;详情&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;技术管理方面&#34;&gt;技术管理方面&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;《CTO说》&lt;a href=&#34;https://www.coderxing.com/r.php?r=https://union-click.jd.com/jdc?d=Gl3QAo&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;详情&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;《技术管理之巅》&lt;a href=&#34;https://www.coderxing.com/r.php?r=https://union-click.jd.com/jdc?d=MeloLt&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;详情&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;《网易一千零一夜：互联网产品项目管理实战》&lt;a href=&#34;https://www.coderxing.com/r.php?r=https://union-click.jd.com/jdc?d=qPuqMg&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;详情&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;基础理论-1&#34;&gt;基础理论&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;《数学之美》&lt;a href=&#34;https://www.coderxing.com/r.php?r=https://union-click.jd.com/jdc?d=0seUpO&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;详情&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;《编程珠玑》&lt;a href=&#34;https://www.coderxing.com/r.php?r=https://union-click.jd.com/jdc?d=I7jj9r&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;详情&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;工具方面&#34;&gt;工具方面&lt;/h4&gt;

&lt;p&gt;TODO&lt;/p&gt;

&lt;h4 id=&#34;大数据方面&#34;&gt;大数据方面&lt;/h4&gt;

&lt;h1 id=&#34;技术资源&#34;&gt;技术资源&lt;/h1&gt;

&lt;h2 id=&#34;开源资源&#34;&gt;开源资源&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;github&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.apache.org/index.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Apache 软件基金会&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;手册-文档-教程&#34;&gt;手册、文档、教程&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;国内：&lt;/strong&gt;
* &lt;a href=&#34;http://w3cschool.cn&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;W3Cschool&lt;/a&gt;
* &lt;a href=&#34;http://www.runoob.com/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Runoob.com&lt;/a&gt;
    * HTML 、 CSS、XML、Java、Python、PHP、设计模式等入门手册。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://love2.io/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Love2.io&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;很多很多中文在线电子书，是一个全新的开源技术文档分享平台。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://gitbook.cn/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;gitbook.cn&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;付费电子书。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.apachecn.org/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;ApacheCN&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;AI、大数据方面系列中文文档。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;国外：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.quickcode.co/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Quick Code&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;免费在线技术教程。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://gitbook.com&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;gitbook.com&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;有部分中文电子书。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cheatography.com/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Cheatography&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Cheat Sheets 大全，单页文档网站。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.tutorialspoint.com/index.htm&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Tutorialspoint&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;知名教程网站，提供Java、Python、JS、SQL、大数据等高质量入门教程。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;在线课堂&#34;&gt;在线课堂&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.xuetuwuyou.com/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;学徒无忧&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://time.geekbang.org/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;极客时间&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://segmentfault.com/lives&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;segmentfault&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://new.stuq.org/course/explore&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;斯达克学院&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://nowcoder.com&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;牛客网&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jikexueyuan.com/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;极客学院&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://edu.51cto.com/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;51CTO学院&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;会议-活动&#34;&gt;会议、活动&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.infoq.com/cn/qcon/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;QCon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://archsummit.com&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;ArchSummit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.thegitc.com/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;GITC全球互联网技术大会&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;活动发布平台:&lt;/strong&gt;
* &lt;a href=&#34;http://www.huodongxing.com/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;活动行&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;常用app&#34;&gt;常用APP&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://time.geekbang.org&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;极客时间&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.igetget.com&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;得到&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;找工作&#34;&gt;找工作&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.zhipin.com&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Boss直聘&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.lagou.com&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;拉勾网&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.liepin.com&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;猎聘&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cn.100offer.com/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;100Offer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;工具&#34;&gt;工具&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://s.geekbang.org/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;极客搜索&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;技术文章搜索引擎。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;代码托管&#34;&gt;代码托管&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://coding.net&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Coding&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gitee.com/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;码云&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;文件服务&#34;&gt;文件服务&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;七牛&lt;/li&gt;
&lt;li&gt;又拍云&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;综合云服务商&#34;&gt;综合云服务商&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;阿里云&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cloud.tencent.com/redirect.php?redirect=1012&amp;amp;cps_key=c2665015d90871c0cb20fef91b7afc3c&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;腾讯云&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;百度云&lt;/li&gt;
&lt;li&gt;新浪云&lt;/li&gt;
&lt;li&gt;金山云&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://amazonaws-china.com/cn/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;亚马逊云(AWS)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cloud.google.com/?hl=zh-cn&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;谷歌云&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://azure.microsoft.com/zh-cn/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;微软云&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;vps&#34;&gt;VPS&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://linode.com&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Linode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.digitalocean.com&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;DigitalOcean&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.vultr.com/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Vultr&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Hugo 主题 Nuo 文章样式预览</title>
      <link>http://www.ebankp.com/2019/hugo_even_preview/</link>
      <pubDate>Wed, 24 Jul 2019 22:41:06 +0800</pubDate>
      
      <guid>http://www.ebankp.com/2019/hugo_even_preview/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;Copy from &lt;a href=&#34;https://laozhu.me/post/hugo-nuo-post-preview/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;《Hugo 主题 Nuo 文章样式预览》&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这篇文章集中说明主题所支持的 Markdown 语法和 Hugo Shortcodes 插件，你也可以在这里预览到他们的样子。如果你不喜欢某些样式，可以去修改 css/ 文件夹下的 .scss 文件。&lt;/p&gt;

&lt;h1 id=&#34;1-标题&#34;&gt;1.标题&lt;/h1&gt;

&lt;h1 id=&#34;h1&#34;&gt;H1&lt;/h1&gt;

&lt;h2 id=&#34;h2&#34;&gt;H2&lt;/h2&gt;

&lt;h3 id=&#34;h3&#34;&gt;H3&lt;/h3&gt;

&lt;h4 id=&#34;h4&#34;&gt;H4&lt;/h4&gt;

&lt;h5 id=&#34;h5&#34;&gt;H5&lt;/h5&gt;

&lt;h6 id=&#34;h6&#34;&gt;H6&lt;/h6&gt;

&lt;h2 id=&#34;2-段落&#34;&gt;2. 段落&lt;/h2&gt;

&lt;p&gt;使用单引号 &lt;code&gt;*&lt;/code&gt; 或者单下划线 &lt;code&gt;_&lt;/code&gt; 标记 &lt;em&gt;斜体强调&lt;/em&gt; 或者 &lt;em&gt;斜体强调&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;使用两个引号 &lt;code&gt;**&lt;/code&gt; 或者两个下划线 &lt;code&gt;__&lt;/code&gt; 标记 &lt;strong&gt;加粗强调&lt;/strong&gt; 或者 &lt;strong&gt;加粗强调&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;引号和下划线可叠加使用 → &lt;strong&gt;只是加粗 &lt;em&gt;斜体并加粗&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;使用两个波浪线 &lt;code&gt;~~&lt;/code&gt; 标记 &lt;del&gt;已删除文字&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;插入文字暂无 &lt;code&gt;Markdown&lt;/code&gt; 标记，直接使用 &lt;code&gt;HTML&lt;/code&gt; 标签 &lt;code&gt;&amp;lt;ins&amp;gt;&lt;/code&gt; 标记 &lt;ins&gt;插入文字&lt;/ins&gt;&lt;/p&gt;

&lt;p&gt;行内代码使用反引号标记 → &lt;code&gt;print(&amp;quot;hello world&amp;quot;)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;上标 X&lt;sup&gt;2&lt;/sup&gt; / 下标 X&lt;sub&gt;2&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;按键 &lt;kbd&gt;Ctrl&lt;/kbd&gt;&lt;/p&gt;

&lt;p&gt;外链 &lt;a href=&#34;https://chekun.me&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;chekun&amp;rsquo;s blog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;页面内段落 &lt;a href=&#34;#section-07&#34;&gt;图片&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;注意：你可以通过 &lt;code&gt;{#section-id}&lt;/code&gt; 方式自定义段落锚点&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;参考资料 &lt;sup&gt;&lt;a href=&#34;#ref01&#34;&gt;[1]&lt;/a&gt;&lt;/sup&gt;&lt;sup&gt;&lt;a href=&#34;#ref02&#34;&gt;[2]&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;h2 id=&#34;3-列表&#34;&gt;3. 列表&lt;/h2&gt;

&lt;p&gt;以下的无序、有序和任务列表均支持二级嵌套，不建议使用二级以上嵌套。&lt;/p&gt;

&lt;h3 id=&#34;3-1-无序列表&#34;&gt;3.1 无序列表&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;无序列表

&lt;ul&gt;
&lt;li&gt;嵌套的无序列表&lt;/li&gt;
&lt;li&gt;嵌套的无序列表&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;无序列表

&lt;ol&gt;
&lt;li&gt;嵌套的有序列表&lt;/li&gt;
&lt;li&gt;嵌套的有序列表&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;无序列表&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;3-2-有序列表&#34;&gt;3.2 有序列表&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;有序列表

&lt;ol&gt;
&lt;li&gt;嵌套的有序列表&lt;/li&gt;
&lt;li&gt;嵌套的有序列表&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;有序列表

&lt;ul&gt;
&lt;li&gt;嵌套的无序列表&lt;/li&gt;
&lt;li&gt;嵌套的无序列表&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;有序列表&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;3-3-定义列表&#34;&gt;3.3 定义列表&lt;/h3&gt;

&lt;dl&gt;
&lt;dt&gt;CSS&lt;/dt&gt;
&lt;dd&gt;层叠样式表&lt;/dd&gt;
&lt;/dl&gt;

&lt;h3 id=&#34;3-4-任务列表&#34;&gt;3.4 任务列表&lt;/h3&gt;

&lt;ul class=&#34;task-list&#34;&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; Cmd Markdown 开发

&lt;ul class=&#34;task-list&#34;&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; 支持以 PDF 格式导出文稿&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; 新增Todo列表功能 &lt;a href=&#34;https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;语法参考&lt;/a&gt;&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; 改进 LaTex 功能&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; 修复 LaTex 公式渲染问题&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; 新增 LaTex 公式编号功能 &lt;a href=&#34;http://docs.mathjax.org/en/latest/tex.html#tex-eq-numbers&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;语法参考&lt;/a&gt;&lt;/label&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; 七月旅行准备

&lt;ul class=&#34;task-list&#34;&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; 准备邮轮上需要携带的物品&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; 浏览日本免税店的物品&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; 购买蓝宝石公主号七月一日的船票&lt;/label&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/label&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;4-引用&#34;&gt;4. 引用&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;野火烧不尽，春风吹又生。&lt;/p&gt;

&lt;p&gt;&lt;cite&gt;&amp;ndash; 白居易《赋得古原草送别》&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;5-代码&#34;&gt;5. 代码&lt;/h2&gt;

&lt;p&gt;以本站的一段 &lt;code&gt;JavaScript&lt;/code&gt; 代码做演示。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// Initialize video.js player
if (document.getElementById(&#39;my-player&#39;) !== null) {
  /* eslint-disable no-undef */
  videojs(&#39;#my-player&#39;, {
    aspectRatio: &#39;16:9&#39;,
    fluid: true,
  });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;6-分割线&#34;&gt;6. 分割线&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;中间能写字的分割线，如果你修改了分割线中字的内容，请配合修改 &lt;code&gt;CSS&lt;/code&gt; 样式。&lt;/p&gt;

&lt;h2 id=&#34;section-07&#34;&gt;7. 图片&lt;/h2&gt;

&lt;p&gt;不带标题的图片，如下图👇&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.ebankp.com/img/01.jpg&#34; alt=&#34;神の1番目破片&#34; title=&#34;&amp;lt;a href=&#39;https://www.pixiv.net/member_illust.php?mode=medium&amp;amp;illust_id=56711268&#39;&amp;gt;神の1番目破片&amp;lt;/a&amp;gt;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;带标题的图片，如下图👇&lt;/p&gt;

&lt;figure class=&#34;center&#34;&gt;
    &lt;img src=&#34;http://www.ebankp.com/img/01.jpg&#34;
         alt=&#34;神の1番目破片&#34;/&gt; &lt;figcaption&gt;
            &lt;h4&gt;神の1番目破片&lt;/h4&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;8-表格&#34;&gt;8. 表格&lt;/h2&gt;

&lt;p&gt;使用 &lt;code&gt;Markdown&lt;/code&gt; 画的表格，如下表👇&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Tables&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Are&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Cool&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;col 3 is&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;right-aligned&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$1600&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;col 2 is&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;centered&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$12&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;zebra stripes&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;are neat&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;9-数学公式&#34;&gt;9. 数学公式&lt;/h2&gt;

&lt;p&gt;主题使用了 &lt;a href=&#34;https://www.mathjax.org/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;MathJax&lt;/a&gt; 开源库来实现对数学公式的支持，使用 &lt;code&gt;$$&lt;/code&gt; 标记。&lt;/p&gt;

&lt;p&gt;$$ evidence_{i}=\sum_{j}W_{ij}x_{j}+b_{i} $$&lt;/p&gt;

&lt;h2 id=&#34;参考资料&#34;&gt;参考资料&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a id=&#34;ref01&#34;&gt;&lt;a href=&#34;https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Markdown Cheatsheet&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a id=&#34;ref02&#34;&gt;&lt;a href=&#34;https://www.zybuluo.com/EncyKe/note/120103&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Markdown 语法手册&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>惯例，Hello World</title>
      <link>http://www.ebankp.com/2019/first_blog/</link>
      <pubDate>Wed, 24 Jul 2019 22:34:51 +0800</pubDate>
      
      <guid>http://www.ebankp.com/2019/first_blog/</guid>
      <description>&lt;p&gt;hugo还是挺好用的，用不上一小时就搭起来了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>关于</title>
      <link>http://www.ebankp.com/about/</link>
      <pubDate>Tue, 23 Jul 2019 22:10:22 +0800</pubDate>
      
      <guid>http://www.ebankp.com/about/</guid>
      <description>&lt;p&gt;从业近十年，写不好代码，但挖的一手好坑🙄&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>